###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     24/Feb/2012  22:19:48 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\kinetis_IAR\13_LQ_OLED_K60\src\Sources\C\LQ12864.c    #
#    Command line =  E:\kinetis_IAR\13_LQ_OLED_K60\src\Sources\C\LQ12864.c    #
#                    -D IAR -D TWR_K60N512 -lCN E:\kinetis_IAR\13_LQ_OLED_K60 #
#                    \bin\Flash\List\ -lB E:\kinetis_IAR\13_LQ_OLED_K60\bin\F #
#                    lash\List\ -o E:\kinetis_IAR\13_LQ_OLED_K60\bin\Flash\Ob #
#                    j\ --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\kinetis_IAR\13_LQ_OLED_K60\src\Sources\H\   #
#                    -I E:\kinetis_IAR\13_LQ_OLED_K60\src\Sources\H\Component #
#                    _H\ -I E:\kinetis_IAR\13_LQ_OLED_K60\src\Sources\H\Frame #
#                    _H\ -Ol --use_c++_inline                                 #
#    List file    =  E:\kinetis_IAR\13_LQ_OLED_K60\bin\Flash\List\LQ12864.lst #
#    Object file  =  E:\kinetis_IAR\13_LQ_OLED_K60\bin\Flash\Obj\LQ12864.o    #
#                                                                             #
#                                                                             #
###############################################################################

E:\kinetis_IAR\13_LQ_OLED_K60\src\Sources\C\LQ12864.c
      1          /********************************************
      2          龙丘MC9S12XS128多功能开发板 
      3          Designed by Chiu Sir
      4          E-mail:chiusir@yahoo.cn
      5          软件版本:V1.1
      6          最后更新:2011年9月18日
      7          相关信息参考下列地址：
      8          网站：  http://www.lqist.cn
      9          淘宝店：http://shop36265907.taobao.com
     10          ------------------------------------
     11          Code Warrior 5.0/1
     12          Target : MC9S12XS128
     13          Crystal: 16.000Mhz
     14          busclock:16.000MHz
     15          pllclock:32.000MHz    
     16           
     17          使用说明：
     18          OLED电源使用3.3V。   
     19          ----------------
     20          G    电源地
     21          3.3V 接3.3V电源
     22          D0   PORTA_PA14  
     23          D1   PORTA_PA15
     24          RST  PORTA_PA16 
     25          DC   PORTA_PA17
     26          CS   已接地，不用接
     27          ============================================
     28          OLED电源使用5V。   
     29          ----------------
     30          G    电源地
     31          3.3V 接5V电源，电源跟模块之间串接100欧姆电阻，并加3.3V钳位二极管
     32          D0   PORTA_PA14 单片机跟模块之间串接1k-3.3k电阻 
     33          D1   PORTA_PA15 单片机跟模块之间串接1k-3.3k电阻 
     34          RST  PORTA_PA16 单片机跟模块之间串接1k-3.3k电阻 
     35          DC   PORTA_PA17 单片机跟模块之间串接1k-3.3k电阻 
     36          CS   已接地，不用接     
     37          ============================================     
     38          如果用户使用的是5V单片机，请看用户手册，切勿烧毁模块！  
     39          ============================================*/
     40          #include "includes.h"
     41          #include "LQ12864.h"
     42          
     43          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(14));	//IO口输出低电平，亮
     44          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14));	//IO口输出高电平，灭
     45          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(15));	//IO口输出低电平，亮
     46          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(15));	//IO口输出高电平，灭
     47          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(16));	//IO口输出低电平，亮
     48          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(16));	//IO口输出高电平，灭
     49          //GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(17));	//IO口输出低电平，亮
     50          //GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(17));	//IO口输出高电平，灭
     51          
     52          #define XLevelL		0x00
     53          #define XLevelH		0x10
     54          #define XLevel		((XLevelH&0x0F)*16+XLevelL)
     55          #define Max_Column	128
     56          #define Max_Row		  64
     57          #define	Brightness	0xCF 
     58          
     59          /*
     60          4线SPI使用说明：
     61          VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
     62          VCC 供内部逻辑电压 1.8~6V   
     63          GND 地
     64          
     65          BS0 低电平
     66          BS1 低电平
     67          BS2 低电平
     68          
     69          CS  片选管脚
     70          DC  命令数据选择管脚
     71          RES 模块复位管脚 
     72          D0（SCLK） ，时钟脚，由MCU控制
     73          D1（MOSI） ，主输出从输入数据脚，由MCU控制
     74          
     75          D2 悬空      
     76          D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
     77          RD  低电平 ，也可悬空，但最好设为低电平
     78          RW  低电平 ，也可悬空，但最好设为低电平
     79          RD  低电平 ，也可悬空，但最好设为低电平   
     80          */
     81          
     82          #define X_WIDTH 128
     83          #define Y_WIDTH 64
     84          //======================================

   \                                 In section .text, align 4, keep-with-next
     85          const byte F6x8[][6] =
   \                     F6x8:
   \   00000000                      ; Initializer data, 552 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47
   \              0000002F    
   \   0000000A   000000000700       DC8 0, 0, 0, 0, 7, 0, 7, 0, 0, 20
   \              07000014    
   \   00000014   7F147F140024       DC8 127, 20, 127, 20, 0, 36, 42, 127, 42, 18
   \              2A7F2A12    
   \   0000001E   006264081323       DC8 0, 98, 100, 8, 19, 35, 0, 54, 73, 85
   \              00364955    
   \   00000028   225000000503       DC8 34, 80, 0, 0, 5, 3, 0, 0, 0, 0
   \              00000000    
   \   00000032   1C2241000000       DC8 28, 34, 65, 0, 0, 0, 65, 34, 28, 0
   \              41221C00    
   \   0000003C   0014083E0814       DC8 0, 20, 8, 62, 8, 20, 0, 8, 8, 62
   \              0008083E    
   \   00000046   0808000000A0       DC8 8, 8, 0, 0, 0, 160, 96, 0, 0, 8
   \              60000008    
   \   00000050   080808080000       DC8 8, 8, 8, 8, 0, 0, 96, 96, 0, 0
   \              60600000    
   \   0000005A   002010080402       DC8 0, 32, 16, 8, 4, 2, 0, 62, 81, 73
   \              003E5149    
   \   00000064   453E0000427F       DC8 69, 62, 0, 0, 66, 127, 64, 0, 0, 66
   \              40000042    
   \   0000006E   615149460021       DC8 97, 81, 73, 70, 0, 33, 65, 69, 75, 49
   \              41454B31    
   \   00000078   001814127F10       DC8 0, 24, 20, 18, 127, 16, 0, 39, 69, 69
   \              00274545    
   \   00000082   4539003C4A49       DC8 69, 57, 0, 60, 74, 73, 73, 48, 0, 1
   \              49300001    
   \   0000008C   710905030036       DC8 113, 9, 5, 3, 0, 54, 73, 73, 73, 54
   \              49494936    
   \   00000096   00064949291E       DC8 0, 6, 73, 73, 41, 30, 0, 0, 54, 54
   \              00003636    
   \   000000A0   000000005636       DC8 0, 0, 0, 0, 86, 54, 0, 0, 0, 8
   \              00000008    
   \   000000AA   142241000014       DC8 20, 34, 65, 0, 0, 20, 20, 20, 20, 20
   \              14141414    
   \   000000B4   000041221408       DC8 0, 0, 65, 34, 20, 8, 0, 2, 1, 81
   \              00020151    
   \   000000BE   090600324959       DC8 9, 6, 0, 50, 73, 89, 81, 62, 0, 124
   \              513E007C    
   \   000000C8   1211127C007F       DC8 18, 17, 18, 124, 0, 127, 73, 73, 73, 54
   \              49494936    
   \   000000D2   003E41414122       DC8 0, 62, 65, 65, 65, 34, 0, 127, 65, 65
   \              007F4141    
   \   000000DC   221C007F4949       DC8 34, 28, 0, 127, 73, 73, 73, 65, 0, 127
   \              4941007F    
   \   000000E6   09090901003E       DC8 9, 9, 9, 1, 0, 62, 65, 73, 73, 122
   \              4149497A    
   \   000000F0   007F0808087F       DC8 0, 127, 8, 8, 8, 127, 0, 0, 65, 127
   \              0000417F    
   \   000000FA   410000204041       DC8 65, 0, 0, 32, 64, 65, 63, 1, 0, 127
   \              3F01007F    
   \   00000104   08142241007F       DC8 8, 20, 34, 65, 0, 127, 64, 64, 64, 64
   \              40404040    
   \   0000010E   007F020C027F       DC8 0, 127, 2, 12, 2, 127, 0, 127, 4, 8
   \              007F0408    
   \   00000118   107F003E4141       DC8 16, 127, 0, 62, 65, 65, 65, 62, 0, 127
   \              413E007F    
   \   00000122   09090906003E       DC8 9, 9, 9, 6, 0, 62, 65, 81, 33, 94
   \              4151215E    
   \   0000012C   007F09192946       DC8 0, 127, 9, 25, 41, 70, 0, 70, 73, 73
   \              00464949    
   \   00000136   49310001017F       DC8 73, 49, 0, 1, 1, 127, 1, 1, 0, 63
   \              0101003F    
   \   00000140   4040403F001F       DC8 64, 64, 64, 63, 0, 31, 32, 64, 32, 31
   \              2040201F    
   \   0000014A   003F4038403F       DC8 0, 63, 64, 56, 64, 63, 0, 99, 20, 8
   \              00631408    
   \   00000154   146300070870       DC8 20, 99, 0, 7, 8, 112, 8, 7, 0, 97
   \              08070061    
   \   0000015E   514945430000       DC8 81, 73, 69, 67, 0, 0, 127, 65, 65, 0
   \              7F414100    
   \   00000168   00552A552A55       DC8 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
   \              00004141    
   \   00000172   7F0000040201       DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64
   \              02040040    
   \   0000017C   404040400000       DC8 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
   \              01020400    
   \   00000186   002054545478       DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68
   \              007F4844    
   \   00000190   443800384444       DC8 68, 56, 0, 56, 68, 68, 68, 32, 0, 56
   \              44200038    
   \   0000019A   4444487F0038       DC8 68, 68, 72, 127, 0, 56, 84, 84, 84, 24
   \              54545418    
   \   000001A4   00087E090102       DC8 0, 8, 126, 9, 1, 2, 0, 24, 164, 164
   \              0018A4A4    
   \   000001AE   A47C007F0804       DC8 164, 124, 0, 127, 8, 4, 4, 120, 0, 0
   \              04780000    
   \   000001B8   447D40000040       DC8 68, 125, 64, 0, 0, 64, 128, 132, 125, 0
   \              80847D00    
   \   000001C2   007F10284400       DC8 0, 127, 16, 40, 68, 0, 0, 0, 65, 127
   \              0000417F    
   \   000001CC   4000007C0418       DC8 64, 0, 0, 124, 4, 24, 4, 120, 0, 124
   \              0478007C    
   \   000001D6   080404780038       DC8 8, 4, 4, 120, 0, 56, 68, 68, 68, 56
   \              44444438    
   \   000001E0   00FC24242418       DC8 0, 252, 36, 36, 36, 24, 0, 24, 36, 36
   \              00182424    
   \   000001EA   18FC007C0804       DC8 24, 252, 0, 124, 8, 4, 4, 8, 0, 72
   \              04080048    
   \   000001F4   545454200004       DC8 84, 84, 84, 32, 0, 4, 63, 68, 64, 32
   \              3F444020    
   \   000001FE   003C4040207C       DC8 0, 60, 64, 64, 32, 124, 0, 28, 32, 64
   \              001C2040    
   \   00000208   201C003C4030       DC8 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
   \              403C0044    
   \   00000212   28102844001C       DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124
   \              A0A0A07C    
   \   0000021C   004464544C44       DC8 0, 68, 100, 84, 76, 68, 20, 20, 20, 20
   \              14141414    
   \   00000226   1414               DC8 20, 20
     86          {
     87              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
     88              { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
     89              { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
     90              { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
     91              { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
     92              { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
     93              { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
     94              { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
     95              { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
     96              { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
     97              { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
     98              { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
     99              { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
    100              { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
    101              { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
    102              { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
    103              { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
    104              { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
    105              { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
    106              { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
    107              { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
    108              { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
    109              { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
    110              { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
    111              { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
    112              { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
    113              { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
    114              { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
    115              { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
    116              { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
    117              { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
    118              { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
    119              { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
    120              { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
    121              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
    122              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
    123              { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
    124              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
    125              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
    126              { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
    127              { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
    128              { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
    129              { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
    130              { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
    131              { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
    132              { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
    133              { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
    134              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
    135              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
    136              { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
    137              { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
    138              { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
    139              { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
    140              { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
    141              { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
    142              { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
    143              { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
    144              { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
    145              { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
    146              { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
    147              { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
    148              { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
    149              { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
    150              { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
    151              { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
    152              { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
    153              { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
    154              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
    155              { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
    156              { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
    157              { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
    158              { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
    159              { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
    160              { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
    161              { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
    162              { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    163              { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
    164              { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
    165              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
    166              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
    167              { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
    168              { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
    169              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
    170              { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
    171              { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
    172              { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
    173              { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    174              { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    175              { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    176              { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    177              { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    178              { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
    179          };

   \                                 In section .text, align 4, keep-with-next
    180          const byte F14x16_Idx[] = 
   \                     F14x16_Idx:
   \   00000000                      ; Initializer data, 52 bytes
   \   00000000   B1B1BEA9C1FA       DC8 177, 177, 190, 169, 193, 250, 199, 240, 199, 241
   \              C7F0C7F1    
   \   0000000A   BFC6BCBCBFAA       DC8 191, 198, 188, 188, 191, 170, 183, 162, 176, 229
   \              B7A2B0E5    
   \   00000014   D6C7C4DCB3B5       DC8 214, 199, 196, 220, 179, 181, 202, 215, 209, 161
   \              CAD7D1A1    
   \   0000001E   D2BABEA7CAD2       DC8 210, 186, 190, 167, 202, 210, 206, 194, 182, 200
   \              CEC2B6C8    
   \   00000028   B0B4BCFCB4CE       DC8 176, 180, 188, 252, 180, 206, 181, 231, 209, 185
   \              B5E7D1B9    
   \   00000032   0000               DC8 0, 0
    181          {
    182          	"北京龙丘邱科技开发板智能车首选液晶室温度按键次电压"
    183          };

   \                                 In section .text, align 4, keep-with-next
    184          const byte F14x16[] = {  
   \                     F14x16:
   \   00000000                      ; Initializer data, 700 bytes
   \   00000000   20202020FF00       DC8 32, 32, 32, 32, 255, 0, 0, 0, 255, 64
   \              0000FF40    
   \   0000000A   203018103018       DC8 32, 48, 24, 16, 48, 24, 8, 4, 127, 0
   \              08047F00    
   \   00000014   00003F404040       DC8 0, 0, 63, 64, 64, 64, 64, 120, 4, 4
   \              40780404    
   \   0000001E   E42424252624       DC8 228, 36, 36, 37, 38, 36, 36, 36, 228, 6
   \              2424E406    
   \   00000028   04002010190D       DC8 4, 0, 32, 16, 25, 13, 65, 129, 127, 1
   \              41817F01    
   \   00000032   01050D381000       DC8 1, 5, 13, 56, 16, 0, 16, 16, 16, 16
   \              10101010    
   \   0000003C   10FF10F0121C       DC8 16, 255, 16, 240, 18, 28, 208, 16, 16, 16
   \              D0101010    
   \   00000046   4020100C0310       DC8 64, 32, 16, 12, 3, 16, 8, 63, 66, 65
   \              083F4241    
   \   00000050   404040700000       DC8 64, 64, 64, 112, 0, 0, 254, 132, 132, 132
   \              FE848484    
   \   0000005A   8482828282C0       DC8 132, 130, 130, 130, 130, 192, 128, 0, 32, 32
   \              80002020    
   \   00000064   3F2020202020       DC8 63, 32, 32, 32, 32, 32, 63, 32, 32, 32
   \              3F202020    
   \   0000006E   302000FC2424       DC8 48, 32, 0, 252, 36, 36, 226, 34, 34, 0
   \              E2222200    
   \   00000078   FE0222528E02       DC8 254, 2, 34, 82, 142, 2, 16, 31, 16, 8
   \              101F1008    
   \   00000082   0F080800FF00       DC8 15, 8, 8, 0, 255, 0, 8, 8, 16, 15
   \              0808100F    
   \   0000008C   129272FE5191       DC8 18, 146, 114, 254, 81, 145, 0, 34, 204, 0
   \              0022CC00    
   \   00000096   00FF00000201       DC8 0, 255, 0, 0, 2, 1, 0, 255, 0, 4
   \              00FF0004    
   \   000000A0   0404020202FF       DC8 4, 4, 2, 2, 2, 255, 1, 1, 8, 136
   \              01010888    
   \   000000AA   FF482800C848       DC8 255, 72, 40, 0, 200, 72, 72, 127, 72, 200
   \              487F48C8    
   \   000000B4   480841807F00       DC8 72, 8, 65, 128, 127, 0, 64, 64, 32, 19
   \              40402013    
   \   000000BE   0C0C12216020       DC8 12, 12, 18, 33, 96, 32, 66, 66, 66, 66
   \              42424242    
   \   000000C8   FE42424242FE       DC8 254, 66, 66, 66, 66, 254, 66, 66, 66, 66
   \              42424242    
   \   000000D2   4020100C0300       DC8 64, 32, 16, 12, 3, 0, 0, 0, 0, 127
   \              0000007F    
   \   000000DC   00000000103E       DC8 0, 0, 0, 0, 16, 62, 16, 16, 240, 159
   \              1010F09F    
   \   000000E6   909092941C10       DC8 144, 144, 146, 148, 28, 16, 16, 16, 32, 16
   \              10102010    
   \   000000F0   888741462810       DC8 136, 135, 65, 70, 40, 16, 40, 39, 64, 192
   \              282740C0    
   \   000000FA   400010D0FF50       DC8 64, 0, 16, 208, 255, 80, 144, 0, 254, 98
   \              9000FE62    
   \   00000104   A22221A16100       DC8 162, 34, 33, 161, 97, 0, 3, 0, 127, 0
   \              03007F00    
   \   0000010E   110E4120110A       DC8 17, 14, 65, 32, 17, 10, 14, 49, 96, 32
   \              0E316020    
   \   00000118   1413927E3252       DC8 20, 19, 146, 126, 50, 82, 146, 0, 124, 68
   \              92007C44    
   \   00000122   44447C000101       DC8 68, 68, 124, 0, 1, 1, 0, 255, 73, 73
   \              00FF4949    
   \   0000012C   49494949FF00       DC8 73, 73, 73, 73, 255, 0, 0, 0, 184, 151
   \              0000B897    
   \   00000136   929094B81000       DC8 146, 144, 148, 184, 16, 0, 127, 72, 72, 68
   \              7F484844    
   \   00000140   7420FF0A0A4A       DC8 116, 32, 255, 10, 10, 74, 138, 127, 0, 0
   \              8A7F0000    
   \   0000014A   3F4444427220       DC8 63, 68, 68, 66, 114, 32, 4, 132, 196, 164
   \              0484C4A4    
   \   00000154   9C8784F48484       DC8 156, 135, 132, 244, 132, 132, 132, 132, 132, 0
   \              84848400    
   \   0000015E   040404040404       DC8 4, 4, 4, 4, 4, 4, 4, 255, 4, 4
   \              04FF0404    
   \   00000168   040404040404       DC8 4, 4, 4, 4, 4, 4, 228, 37, 38, 52
   \              E4252634    
   \   00000172   2C242426E504       DC8 44, 36, 36, 38, 229, 4, 4, 4, 0, 0
   \              04040000    
   \   0000017C   7F2525252525       DC8 127, 37, 37, 37, 37, 37, 37, 37, 127, 0
   \              25257F00    
   \   00000186   00004042CC00       DC8 0, 0, 64, 66, 204, 0, 80, 78, 200, 72
   \              504EC848    
   \   00000190   7FC848484000       DC8 127, 200, 72, 72, 64, 0, 64, 32, 31, 32
   \              40201F20    
   \   0000019A   484641404047       DC8 72, 70, 65, 64, 64, 71, 72, 72, 78, 64
   \              48484E40    
   \   000001A4   6106E01884E4       DC8 97, 6, 224, 24, 132, 228, 28, 132, 101, 190
   \              1C8465BE    
   \   000001AE   24A4640404FF       DC8 36, 164, 100, 4, 4, 255, 0, 1, 0, 255
   \              000100FF    
   \   000001B8   4121120C1B61       DC8 65, 33, 18, 12, 27, 97, 192, 64, 0, 0
   \              C0400000    
   \   000001C2   007E2A2A2A2A       DC8 0, 126, 42, 42, 42, 42, 42, 42, 126, 0
   \              2A2A7E00    
   \   000001CC   00007F252525       DC8 0, 0, 127, 37, 37, 37, 37, 127, 0, 0
   \              257F0000    
   \   000001D6   7F252525257F       DC8 127, 37, 37, 37, 37, 127, 16, 44, 36, 164
   \              102C24A4    
   \   000001E0   6425262424A4       DC8 100, 37, 38, 36, 36, 164, 36, 52, 44, 4
   \              24342C04    
   \   000001EA   404849494949       DC8 64, 72, 73, 73, 73, 73, 127, 73, 73, 73
   \              7F494949    
   \   000001F4   4B4840402186       DC8 75, 72, 64, 64, 33, 134, 112, 0, 126, 74
   \              70007E4A    
   \   000001FE   4A4A4A4A7E00       DC8 74, 74, 74, 74, 126, 0, 0, 0, 254, 1
   \              0000FE01    
   \   00000208   407F41417F41       DC8 64, 127, 65, 65, 127, 65, 65, 127, 65, 65
   \              417F4141    
   \   00000212   7F4000FC0424       DC8 127, 64, 0, 252, 4, 36, 36, 252, 165, 166
   \              24FCA5A6    
   \   0000021C   A4FC24242404       DC8 164, 252, 36, 36, 36, 4, 96, 31, 128, 128
   \              601F8080    
   \   00000226   42462A12122A       DC8 66, 70, 42, 18, 18, 42, 38, 66, 192, 64
   \              2642C040    
   \   00000230   1010FF905098       DC8 16, 16, 255, 144, 80, 152, 136, 136, 233, 142
   \              8888E98E    
   \   0000023A   888898884281       DC8 136, 136, 152, 136, 66, 129, 127, 0, 64, 64
   \              7F004040    
   \   00000244   262518081631       DC8 38, 37, 24, 8, 22, 49, 96, 32, 48, 239
   \              602030EF    
   \   0000024E   28284464DC10       DC8 40, 40, 68, 100, 220, 16, 84, 255, 84, 84
   \              54FF5454    
   \   00000258   7C10017F2151       DC8 124, 16, 1, 127, 33, 81, 34, 20, 15, 20
   \              22140F14    
   \   00000262   253F45454544       DC8 37, 63, 69, 69, 69, 68, 2, 28, 192, 48
   \              021CC030    
   \   0000026C   4C300F08F808       DC8 76, 48, 15, 8, 248, 8, 8, 40, 24, 8
   \              08281808    
   \   00000276   5E4320201008       DC8 94, 67, 32, 32, 16, 8, 4, 3, 1, 6
   \              04030106    
   \   00000280   0830602000F8       DC8 8, 48, 96, 32, 0, 248, 72, 72, 72, 72
   \              48484848    
   \   0000028A   FF48484848F8       DC8 255, 72, 72, 72, 72, 248, 0, 0, 0, 15
   \              0000000F    
   \   00000294   040404043F44       DC8 4, 4, 4, 4, 63, 68, 68, 68, 68, 79
   \              4444444F    
   \   0000029E   407000FE0242       DC8 64, 112, 0, 254, 2, 66, 66, 66, 66, 250
   \              424242FA    
   \   000002A8   424242624202       DC8 66, 66, 66, 98, 66, 2, 24, 39, 32, 32
   \              18272020    
   \   000002B2   2020203F2021       DC8 32, 32, 32, 63, 32, 33, 46, 36, 32, 32
   \              2E242020    
    185          0x20,0x20,0x20,0x20,0xFF,0x00,0x00,0x00,0xFF,0x40,0x20,0x30,0x18,0x10,
    186          0x30,0x18,0x08,0x04,0x7F,0x00,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x78,//北0
    187          0x04,0x04,0xE4,0x24,0x24,0x25,0x26,0x24,0x24,0x24,0xE4,0x06,0x04,0x00,
    188          0x20,0x10,0x19,0x0D,0x41,0x81,0x7F,0x01,0x01,0x05,0x0D,0x38,0x10,0x00,//京1
    189          0x10,0x10,0x10,0x10,0x10,0xFF,0x10,0xF0,0x12,0x1C,0xD0,0x10,0x10,0x10,
    190          0x40,0x20,0x10,0x0C,0x03,0x10,0x08,0x3F,0x42,0x41,0x40,0x40,0x40,0x70,//龙2
    191          0x00,0x00,0xFE,0x84,0x84,0x84,0x84,0x82,0x82,0x82,0x82,0xC0,0x80,0x00,
    192          0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x30,0x20,//丘3
    193          0x00,0xFC,0x24,0x24,0xE2,0x22,0x22,0x00,0xFE,0x02,0x22,0x52,0x8E,0x02,
    194          0x10,0x1F,0x10,0x08,0x0F,0x08,0x08,0x00,0xFF,0x00,0x08,0x08,0x10,0x0F,//邱4
    195          0x12,0x92,0x72,0xFE,0x51,0x91,0x00,0x22,0xCC,0x00,0x00,0xFF,0x00,0x00,
    196          0x02,0x01,0x00,0xFF,0x00,0x04,0x04,0x04,0x02,0x02,0x02,0xFF,0x01,0x01,//科5
    197          0x08,0x88,0xFF,0x48,0x28,0x00,0xC8,0x48,0x48,0x7F,0x48,0xC8,0x48,0x08,
    198          0x41,0x80,0x7F,0x00,0x40,0x40,0x20,0x13,0x0C,0x0C,0x12,0x21,0x60,0x20,//技6
    199          0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,
    200          0x40,0x20,0x10,0x0C,0x03,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,//开7
    201          0x10,0x3E,0x10,0x10,0xF0,0x9F,0x90,0x90,0x92,0x94,0x1C,0x10,0x10,0x10,
    202          0x20,0x10,0x88,0x87,0x41,0x46,0x28,0x10,0x28,0x27,0x40,0xC0,0x40,0x00,//发8
    203          0x10,0xD0,0xFF,0x50,0x90,0x00,0xFE,0x62,0xA2,0x22,0x21,0xA1,0x61,0x00,
    204          0x03,0x00,0x7F,0x00,0x11,0x0E,0x41,0x20,0x11,0x0A,0x0E,0x31,0x60,0x20,//板9
    205          0x14,0x13,0x92,0x7E,0x32,0x52,0x92,0x00,0x7C,0x44,0x44,0x44,0x7C,0x00,
    206          0x01,0x01,0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,0x00,//智10
    207          0xB8,0x97,0x92,0x90,0x94,0xB8,0x10,0x00,0x7F,0x48,0x48,0x44,0x74,0x20,
    208          0xFF,0x0A,0x0A,0x4A,0x8A,0x7F,0x00,0x00,0x3F,0x44,0x44,0x42,0x72,0x20,//能11
    209          0x04,0x84,0xC4,0xA4,0x9C,0x87,0x84,0xF4,0x84,0x84,0x84,0x84,0x84,0x00,
    210          0x04,0x04,0x04,0x04,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x04,0x04,//车12
    211          0x04,0x04,0xE4,0x25,0x26,0x34,0x2C,0x24,0x24,0x26,0xE5,0x04,0x04,0x04,
    212          0x00,0x00,0x7F,0x25,0x25,0x25,0x25,0x25,0x25,0x25,0x7F,0x00,0x00,0x00,//首13
    213          0x40,0x42,0xCC,0x00,0x50,0x4E,0xC8,0x48,0x7F,0xC8,0x48,0x48,0x40,0x00,
    214          0x40,0x20,0x1F,0x20,0x48,0x46,0x41,0x40,0x40,0x47,0x48,0x48,0x4E,0x40,//选14
    215          0x61,0x06,0xE0,0x18,0x84,0xE4,0x1C,0x84,0x65,0xBE,0x24,0xA4,0x64,0x04,
    216          0x04,0xFF,0x00,0x01,0x00,0xFF,0x41,0x21,0x12,0x0C,0x1B,0x61,0xC0,0x40,//液15
    217          0x00,0x00,0x00,0x7E,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x7E,0x00,0x00,0x00,
    218          0x7F,0x25,0x25,0x25,0x25,0x7F,0x00,0x00,0x7F,0x25,0x25,0x25,0x25,0x7F,//晶16
    219          0x10,0x2C,0x24,0xA4,0x64,0x25,0x26,0x24,0x24,0xA4,0x24,0x34,0x2C,0x04,
    220          0x40,0x48,0x49,0x49,0x49,0x49,0x7F,0x49,0x49,0x49,0x4B,0x48,0x40,0x40,//室17
    221          0x21,0x86,0x70,0x00,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,
    222          0xFE,0x01,0x40,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x40,//温18
    223          0x00,0xFC,0x04,0x24,0x24,0xFC,0xA5,0xA6,0xA4,0xFC,0x24,0x24,0x24,0x04,
    224          0x60,0x1F,0x80,0x80,0x42,0x46,0x2A,0x12,0x12,0x2A,0x26,0x42,0xC0,0x40,//度19
    225          0x10,0x10,0xFF,0x90,0x50,0x98,0x88,0x88,0xE9,0x8E,0x88,0x88,0x98,0x88,
    226          0x42,0x81,0x7F,0x00,0x40,0x40,0x26,0x25,0x18,0x08,0x16,0x31,0x60,0x20,//按20
    227          0x30,0xEF,0x28,0x28,0x44,0x64,0xDC,0x10,0x54,0xFF,0x54,0x54,0x7C,0x10,
    228          0x01,0x7F,0x21,0x51,0x22,0x14,0x0F,0x14,0x25,0x3F,0x45,0x45,0x45,0x44,//键21
    229          0x02,0x1C,0xC0,0x30,0x4C,0x30,0x0F,0x08,0xF8,0x08,0x08,0x28,0x18,0x08,
    230          0x5E,0x43,0x20,0x20,0x10,0x08,0x04,0x03,0x01,0x06,0x08,0x30,0x60,0x20,//次22
    231          0x00,0xF8,0x48,0x48,0x48,0x48,0xFF,0x48,0x48,0x48,0x48,0xF8,0x00,0x00,
    232          0x00,0x0F,0x04,0x04,0x04,0x04,0x3F,0x44,0x44,0x44,0x44,0x4F,0x40,0x70,//电23
    233          0x00,0xFE,0x02,0x42,0x42,0x42,0x42,0xFA,0x42,0x42,0x42,0x62,0x42,0x02,
    234          0x18,0x27,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x21,0x2E,0x24,0x20,0x20,//压24  
    235          };
    236          
    237          //======================================================
    238          // 128X64I液晶底层驱动[8X16]字体库
    239          // 设计者: powerint
    240          // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
    241          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
    242          //======================================================

   \                                 In section .text, align 4, keep-with-next
    243          const byte F8X16[]=
   \                     F8X16:
   \   00000000                      ; Initializer data, 1520 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 248
   \              000000F8    
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 51, 48, 0
   \              00333000    
   \   0000001E   000000100C06       DC8 0, 0, 0, 16, 12, 6, 16, 12, 6, 0
   \              100C0600    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 64, 192
   \              000040C0    
   \   00000032   7840C0784000       DC8 120, 64, 192, 120, 64, 0, 4, 63, 4, 4
   \              043F0404    
   \   0000003C   3F0404000070       DC8 63, 4, 4, 0, 0, 112, 136, 252, 8, 48
   \              88FC0830    
   \   00000046   0000001820FF       DC8 0, 0, 0, 24, 32, 255, 33, 30, 0, 0
   \              211E0000    
   \   00000050   F008F000E018       DC8 240, 8, 240, 0, 224, 24, 0, 0, 0, 33
   \              00000021    
   \   0000005A   1C031E211E00       DC8 28, 3, 30, 33, 30, 0, 0, 240, 8, 136
   \              00F00888    
   \   00000064   700000001E21       DC8 112, 0, 0, 0, 30, 33, 35, 36, 25, 39
   \              23241927    
   \   0000006E   211010160E00       DC8 33, 16, 16, 22, 14, 0, 0, 0, 0, 0
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000082   00E018040200       DC8 0, 224, 24, 4, 2, 0, 0, 0, 0, 7
   \              00000007    
   \   0000008C   182040000002       DC8 24, 32, 64, 0, 0, 2, 4, 24, 224, 0
   \              0418E000    
   \   00000096   000000402018       DC8 0, 0, 0, 64, 32, 24, 7, 0, 0, 0
   \              07000000    
   \   000000A0   404080F08040       DC8 64, 64, 128, 240, 128, 64, 64, 0, 2, 2
   \              40000202    
   \   000000AA   010F01020200       DC8 1, 15, 1, 2, 2, 0, 0, 0, 0, 240
   \              000000F0    
   \   000000B4   000000000101       DC8 0, 0, 0, 0, 1, 1, 1, 31, 1, 1
   \              011F0101    
   \   000000BE   010000000000       DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000C8   80B070000000       DC8 128, 176, 112, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000D2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 1, 1, 1
   \              00010101    
   \   000000DC   010101010000       DC8 1, 1, 1, 1, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000E6   000000303000       DC8 0, 0, 0, 48, 48, 0, 0, 0, 0, 0
   \              00000000    
   \   000000F0   000000008060       DC8 0, 0, 0, 0, 128, 96, 24, 4, 0, 96
   \              18040060    
   \   000000FA   180601000000       DC8 24, 6, 1, 0, 0, 0, 0, 224, 16, 8
   \              00E01008    
   \   00000104   0810E000000F       DC8 8, 16, 224, 0, 0, 15, 16, 32, 32, 16
   \              10202010    
   \   0000010E   0F00001010F8       DC8 15, 0, 0, 16, 16, 248, 0, 0, 0, 0
   \              00000000    
   \   00000118   0020203F2020       DC8 0, 32, 32, 63, 32, 32, 0, 0, 0, 112
   \              00000070    
   \   00000122   080808887000       DC8 8, 8, 8, 136, 112, 0, 0, 48, 40, 36
   \              00302824    
   \   0000012C   222130000030       DC8 34, 33, 48, 0, 0, 48, 8, 136, 136, 72
   \              08888848    
   \   00000136   300000182020       DC8 48, 0, 0, 24, 32, 32, 32, 17, 14, 0
   \              20110E00    
   \   00000140   0000C02010F8       DC8 0, 0, 192, 32, 16, 248, 0, 0, 0, 7
   \              00000007    
   \   0000014A   0424243F2400       DC8 4, 36, 36, 63, 36, 0, 0, 248, 8, 136
   \              00F80888    
   \   00000154   880808000019       DC8 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
   \              21202011    
   \   0000015E   0E0000E01088       DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0
   \              88180000    
   \   00000168   000F11202011       DC8 0, 15, 17, 32, 32, 17, 14, 0, 0, 56
   \              0E000038    
   \   00000172   0808C8380800       DC8 8, 8, 200, 56, 8, 0, 0, 0, 0, 63
   \              0000003F    
   \   0000017C   000000000070       DC8 0, 0, 0, 0, 0, 112, 136, 8, 8, 136
   \              88080888    
   \   00000186   7000001C2221       DC8 112, 0, 0, 28, 34, 33, 33, 34, 28, 0
   \              21221C00    
   \   00000190   00E010080810       DC8 0, 224, 16, 8, 8, 16, 224, 0, 0, 0
   \              E0000000    
   \   0000019A   312222110F00       DC8 49, 34, 34, 17, 15, 0, 0, 0, 0, 192
   \              000000C0    
   \   000001A4   C00000000000       DC8 192, 0, 0, 0, 0, 0, 0, 48, 48, 0
   \              00303000    
   \   000001AE   000000000080       DC8 0, 0, 0, 0, 0, 128, 0, 0, 0, 0
   \              00000000    
   \   000001B8   000080600000       DC8 0, 0, 128, 96, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000001C2   804020100800       DC8 128, 64, 32, 16, 8, 0, 0, 1, 2, 4
   \              00010204    
   \   000001CC   081020004040       DC8 8, 16, 32, 0, 64, 64, 64, 64, 64, 64
   \              40404040    
   \   000001D6   400004040404       DC8 64, 0, 4, 4, 4, 4, 4, 4, 4, 0
   \              04040400    
   \   000001E0   000810204080       DC8 0, 8, 16, 32, 64, 128, 0, 0, 0, 32
   \              00000020    
   \   000001EA   100804020100       DC8 16, 8, 4, 2, 1, 0, 0, 112, 72, 8
   \              00704808    
   \   000001F4   0808F0000000       DC8 8, 8, 240, 0, 0, 0, 0, 48, 54, 1
   \              00303601    
   \   000001FE   0000C030C828       DC8 0, 0, 192, 48, 200, 40, 232, 16, 224, 0
   \              E810E000    
   \   00000208   071827242314       DC8 7, 24, 39, 36, 35, 20, 11, 0, 0, 0
   \              0B000000    
   \   00000212   C038E0000000       DC8 192, 56, 224, 0, 0, 0, 32, 60, 35, 2
   \              203C2302    
   \   0000021C   0227382008F8       DC8 2, 39, 56, 32, 8, 248, 136, 136, 136, 112
   \              88888870    
   \   00000226   0000203F2020       DC8 0, 0, 32, 63, 32, 32, 32, 17, 14, 0
   \              20110E00    
   \   00000230   C03008080808       DC8 192, 48, 8, 8, 8, 8, 56, 0, 7, 24
   \              38000718    
   \   0000023A   202020100800       DC8 32, 32, 32, 16, 8, 0, 8, 248, 8, 8
   \              08F80808    
   \   00000244   0810E000203F       DC8 8, 16, 224, 0, 32, 63, 32, 32, 32, 16
   \              20202010    
   \   0000024E   0F0008F88888       DC8 15, 0, 8, 248, 136, 136, 232, 8, 16, 0
   \              E8081000    
   \   00000258   203F20202320       DC8 32, 63, 32, 32, 35, 32, 24, 0, 8, 248
   \              180008F8    
   \   00000262   8888E8081000       DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 0
   \              203F2000    
   \   0000026C   03000000C030       DC8 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
   \              08080838    
   \   00000276   000007182020       DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0
   \              221E0200    
   \   00000280   08F808000008       DC8 8, 248, 8, 0, 0, 8, 248, 8, 32, 63
   \              F808203F    
   \   0000028A   210101213F20       DC8 33, 1, 1, 33, 63, 32, 0, 8, 8, 248
   \              000808F8    
   \   00000294   080800000020       DC8 8, 8, 0, 0, 0, 32, 32, 63, 32, 32
   \              203F2020    
   \   0000029E   000000000808       DC8 0, 0, 0, 0, 8, 8, 248, 8, 8, 0
   \              F8080800    
   \   000002A8   C08080807F00       DC8 192, 128, 128, 128, 127, 0, 0, 0, 8, 248
   \              000008F8    
   \   000002B2   88C028180800       DC8 136, 192, 40, 24, 8, 0, 32, 63, 32, 1
   \              203F2001    
   \   000002BC   2638200008F8       DC8 38, 56, 32, 0, 8, 248, 8, 0, 0, 0
   \              08000000    
   \   000002C6   0000203F2020       DC8 0, 0, 32, 63, 32, 32, 32, 32, 48, 0
   \              20203000    
   \   000002D0   08F8F800F8F8       DC8 8, 248, 248, 0, 248, 248, 8, 0, 32, 63
   \              0800203F    
   \   000002DA   003F003F2000       DC8 0, 63, 0, 63, 32, 0, 8, 248, 48, 192
   \              08F830C0    
   \   000002E4   0008F808203F       DC8 0, 8, 248, 8, 32, 63, 32, 0, 7, 24
   \              20000718    
   \   000002EE   3F00E0100808       DC8 63, 0, 224, 16, 8, 8, 8, 16, 224, 0
   \              0810E000    
   \   000002F8   0F1020202010       DC8 15, 16, 32, 32, 32, 16, 15, 0, 8, 248
   \              0F0008F8    
   \   00000302   08080808F000       DC8 8, 8, 8, 8, 240, 0, 32, 63, 33, 1
   \              203F2101    
   \   0000030C   01010000E010       DC8 1, 1, 0, 0, 224, 16, 8, 8, 8, 16
   \              08080810    
   \   00000316   E0000F182424       DC8 224, 0, 15, 24, 36, 36, 56, 80, 79, 0
   \              38504F00    
   \   00000320   08F888888888       DC8 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
   \              7000203F    
   \   0000032A   2000030C3020       DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8
   \              00708808    
   \   00000334   080838000038       DC8 8, 8, 56, 0, 0, 56, 32, 33, 33, 34
   \              20212122    
   \   0000033E   1C00180808F8       DC8 28, 0, 24, 8, 8, 248, 8, 8, 24, 0
   \              08081800    
   \   00000348   0000203F2000       DC8 0, 0, 32, 63, 32, 0, 0, 0, 8, 248
   \              000008F8    
   \   00000352   08000008F808       DC8 8, 0, 0, 8, 248, 8, 0, 31, 32, 32
   \              001F2020    
   \   0000035C   20201F000878       DC8 32, 32, 31, 0, 8, 120, 136, 0, 0, 200
   \              880000C8    
   \   00000366   380800000738       DC8 56, 8, 0, 0, 7, 56, 14, 1, 0, 0
   \              0E010000    
   \   00000370   F80800F80008       DC8 248, 8, 0, 248, 0, 8, 248, 0, 3, 60
   \              F800033C    
   \   0000037A   0700073C0300       DC8 7, 0, 7, 60, 3, 0, 8, 24, 104, 128
   \              08186880    
   \   00000384   806818082030       DC8 128, 104, 24, 8, 32, 48, 44, 3, 3, 44
   \              2C03032C    
   \   0000038E   30200838C800       DC8 48, 32, 8, 56, 200, 0, 200, 56, 8, 0
   \              C8380800    
   \   00000398   0000203F2000       DC8 0, 0, 32, 63, 32, 0, 0, 0, 16, 8
   \              00001008    
   \   000003A2   0808C8380800       DC8 8, 8, 200, 56, 8, 0, 32, 56, 38, 33
   \              20382621    
   \   000003AC   202018000000       DC8 32, 32, 24, 0, 0, 0, 0, 254, 2, 2
   \              00FE0202    
   \   000003B6   02000000007F       DC8 2, 0, 0, 0, 0, 127, 64, 64, 64, 0
   \              40404000    
   \   000003C0   000C30C00000       DC8 0, 12, 48, 192, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000003CA   00010638C000       DC8 0, 1, 6, 56, 192, 0, 0, 2, 2, 2
   \              00020202    
   \   000003D4   FE0000000040       DC8 254, 0, 0, 0, 0, 64, 64, 64, 127, 0
   \              40407F00    
   \   000003DE   000000000402       DC8 0, 0, 0, 0, 4, 2, 2, 2, 4, 0
   \              02020400    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000003F2   000000000000       DC8 0, 0, 0, 0, 0, 0, 128, 128, 128, 128
   \              80808080    
   \   000003FC   808080800002       DC8 128, 128, 128, 128, 0, 2, 2, 4, 0, 0
   \              02040000    
   \   00000406   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000410   000080808080       DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 25
   \              00000019    
   \   0000041A   242222223F20       DC8 36, 34, 34, 34, 63, 32, 8, 248, 0, 128
   \              08F80080    
   \   00000424   80000000003F       DC8 128, 0, 0, 0, 0, 63, 17, 32, 32, 17
   \              11202011    
   \   0000042E   0E0000000080       DC8 14, 0, 0, 0, 0, 128, 128, 128, 0, 0
   \              80800000    
   \   00000438   000E11202020       DC8 0, 14, 17, 32, 32, 32, 17, 0, 0, 0
   \              11000000    
   \   00000442   00808088F800       DC8 0, 128, 128, 136, 248, 0, 0, 14, 17, 32
   \              000E1120    
   \   0000044C   20103F200000       DC8 32, 16, 63, 32, 0, 0, 128, 128, 128, 128
   \              80808080    
   \   00000456   0000001F2222       DC8 0, 0, 0, 31, 34, 34, 34, 34, 19, 0
   \              22221300    
   \   00000460   008080F08888       DC8 0, 128, 128, 240, 136, 136, 136, 24, 0, 32
   \              88180020    
   \   0000046A   203F20200000       DC8 32, 63, 32, 32, 0, 0, 0, 0, 128, 128
   \              00008080    
   \   00000474   80808000006B       DC8 128, 128, 128, 0, 0, 107, 148, 148, 148, 147
   \              94949493    
   \   0000047E   600008F80080       DC8 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
   \              80800000    
   \   00000488   203F21000020       DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128
   \              3F200080    
   \   00000492   989800000000       DC8 152, 152, 0, 0, 0, 0, 0, 32, 32, 63
   \              0020203F    
   \   0000049C   202000000000       DC8 32, 32, 0, 0, 0, 0, 0, 128, 152, 152
   \              00809898    
   \   000004A6   000000C08080       DC8 0, 0, 0, 192, 128, 128, 128, 127, 0, 0
   \              807F0000    
   \   000004B0   08F800008080       DC8 8, 248, 0, 0, 128, 128, 128, 0, 32, 63
   \              8000203F    
   \   000004BA   24022D302000       DC8 36, 2, 45, 48, 32, 0, 0, 8, 8, 248
   \              000808F8    
   \   000004C4   000000000020       DC8 0, 0, 0, 0, 0, 32, 32, 63, 32, 32
   \              203F2020    
   \   000004CE   000080808080       DC8 0, 0, 128, 128, 128, 128, 128, 128, 128, 0
   \              80808000    
   \   000004D8   203F20003F20       DC8 32, 63, 32, 0, 63, 32, 0, 63, 128, 128
   \              003F8080    
   \   000004E2   008080800000       DC8 0, 128, 128, 128, 0, 0, 32, 63, 33, 0
   \              203F2100    
   \   000004EC   00203F200000       DC8 0, 32, 63, 32, 0, 0, 128, 128, 128, 128
   \              80808080    
   \   000004F6   0000001F2020       DC8 0, 0, 0, 31, 32, 32, 32, 32, 31, 0
   \              20201F00    
   \   00000500   808000808000       DC8 128, 128, 0, 128, 128, 0, 0, 0, 128, 255
   \              000080FF    
   \   0000050A   A12020110E00       DC8 161, 32, 32, 17, 14, 0, 0, 0, 0, 128
   \              00000080    
   \   00000514   80808000000E       DC8 128, 128, 128, 0, 0, 14, 17, 32, 32, 160
   \              112020A0    
   \   0000051E   FF8080808000       DC8 255, 128, 128, 128, 128, 0, 128, 128, 128, 0
   \              80808000    
   \   00000528   20203F212000       DC8 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
   \              01000000    
   \   00000532   808080808000       DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36
   \              00332424    
   \   0000053C   242419000080       DC8 36, 36, 25, 0, 0, 128, 128, 224, 128, 128
   \              80E08080    
   \   00000546   00000000001F       DC8 0, 0, 0, 0, 0, 31, 32, 32, 0, 0
   \              20200000    
   \   00000550   808000000080       DC8 128, 128, 0, 0, 0, 128, 128, 0, 0, 31
   \              8000001F    
   \   0000055A   202020103F20       DC8 32, 32, 32, 16, 63, 32, 128, 128, 128, 0
   \              80808000    
   \   00000564   008080800001       DC8 0, 128, 128, 128, 0, 1, 14, 48, 8, 6
   \              0E300806    
   \   0000056E   010080800080       DC8 1, 0, 128, 128, 0, 128, 0, 128, 128, 128
   \              00808080    
   \   00000578   0F300C030C30       DC8 15, 48, 12, 3, 12, 48, 15, 0, 0, 128
   \              0F000080    
   \   00000582   800080808000       DC8 128, 0, 128, 128, 128, 0, 0, 32, 49, 46
   \              0020312E    
   \   0000058C   0E3120008080       DC8 14, 49, 32, 0, 128, 128, 128, 0, 0, 128
   \              80000080    
   \   00000596   808080818E70       DC8 128, 128, 128, 129, 142, 112, 24, 6, 1, 0
   \              18060100    
   \   000005A0   008080808080       DC8 0, 128, 128, 128, 128, 128, 128, 0, 0, 33
   \              80000021    
   \   000005AA   302C22213000       DC8 48, 44, 34, 33, 48, 0, 0, 0, 0, 0
   \              00000000    
   \   000005B4   807C02020000       DC8 128, 124, 2, 2, 0, 0, 0, 0, 0, 63
   \              0000003F    
   \   000005BE   404000000000       DC8 64, 64, 0, 0, 0, 0, 255, 0, 0, 0
   \              FF000000    
   \   000005C8   00000000FF00       DC8 0, 0, 0, 0, 255, 0, 0, 0, 0, 2
   \              00000002    
   \   000005D2   027C80000000       DC8 2, 124, 128, 0, 0, 0, 0, 64, 64, 63
   \              0040403F    
   \   000005DC   000000000006       DC8 0, 0, 0, 0, 0, 6, 1, 1, 2, 2
   \              01010202    
   \   000005E6   040400000000       DC8 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
    244          {
    245          	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
    246            0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
    247            0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
    248            0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
    249            0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
    250            0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
    251            0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
    252            0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
    253            0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
    254            0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
    255            0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
    256            0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
    257            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
    258            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
    259            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
    260            0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
    261            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
    262            0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
    263            0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
    264            0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
    265            0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
    266            0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
    267            0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
    268            0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
    269            0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
    270            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
    271            0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
    272            0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
    273            0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
    274            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
    275            0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
    276            0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
    277            0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
    278            0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
    279            0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
    280            0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
    281            0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
    282            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
    283            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
    284            0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
    285            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
    286            0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
    287            0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
    288            0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
    289            0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
    290            0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
    291            0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
    292            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
    293            0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
    294            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
    295            0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
    296            0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
    297            0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
    298            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
    299            0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
    300            0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
    301            0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
    302            0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
    303            0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
    304            0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
    305            0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
    306            0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
    307            0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
    308            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
    309            0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
    310            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
    311            0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
    312            0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
    313            0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
    314            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
    315            0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
    316            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
    317            0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
    318            0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
    319            0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
    320            0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
    321            0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
    322            0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
    323            0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
    324            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
    325            0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
    326            0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
    327            0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
    328            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
    329            0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
    330            0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
    331            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
    332            0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
    333            0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
    334            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
    335            0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
    336            0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
    337            0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
    338            0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
    339            0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
    340          
    341          };
    342          //数据水平，字节垂直

   \                                 In section .data, align 4
    343          byte longqiu96x64[768] = {
   \                     longqiu96x64:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 192
   \              000000000000
   \              000000000000
   \              8080C0      
   \   00000015   C0C060606030       DC8 192, 192, 96, 96, 96, 48, 48, 48, 56, 24, 24, 24, 24, 12, 12, 12
   \              303038181818
   \              180C0C0C    
   \   00000025   0C0C0E0E0E06       DC8 12, 12, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14
   \              060606060606
   \              060606060606
   \              0E0E        
   \   00000039   0C0C0C0C0C1C       DC8 12, 12, 12, 12, 12, 28, 24, 24, 24, 24, 48, 48, 48, 112, 96, 96
   \              181818183030
   \              30706060    
   \   00000049   E0C0C0808000       DC8 224, 192, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 112, 48, 56, 28, 12
   \              000000000080
   \              C0E07030381C
   \              0C          
   \   0000006F   060703030101       DC8 6, 7, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000086   808080000000       DC8 128, 128, 128, 0, 0, 0, 0, 0, 128, 128, 240, 248, 248, 240, 128, 0
   \              00008080F0F8
   \              F8F08000    
   \   00000096   0080E0F0F8FC       DC8 0, 128, 224, 240, 248, 252, 60, 28, 12, 12, 28, 252, 248, 240, 224
   \              3C1C0C0C1CFC
   \              F8F0E0      
   \   000000A5   80000000C0C0       DC8 128, 0, 0, 0, 192, 192, 193, 1, 3, 3, 7, 6, 14, 12, 24, 56, 112, 96
   \              C10103030706
   \              0E0C18387060
   \   000000B7   C08080000000       DC8 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 240, 120, 30, 7, 51, 49
   \              0000000000C0
   \              F0781E073331
   \   000000C9   3878FCFEF6C0       DC8 56, 120, 252, 254, 246, 192, 128, 0, 0, 0, 0, 192, 192, 128, 0, 248
   \              8000000000C0
   \              C08000F8    
   \   000000D9   FCDE0E0F1EBE       DC8 252, 222, 14, 15, 30, 190, 252, 240, 6, 255, 255, 255, 255, 3, 7
   \              FCF006FFFFFF
   \              FF0307      
   \   000000E8   FFFFFE801E3F       DC8 255, 255, 254, 128, 30, 63, 255, 255, 249, 249, 255, 255, 127, 31
   \              FFFFF9F9FFFF
   \              7F1F        
   \   000000F6   0E7FFFFFFFC1       DC8 14, 127, 255, 255, 255, 193, 128, 206, 206, 198, 192, 255, 255, 255
   \              80CECEC6C0FF
   \              FFFF        
   \   00000104   FF3F80FCFCFD       DC8 255, 63, 128, 252, 252, 253, 125, 1, 192, 248, 248, 240, 112, 0
   \              7D01C0F8F8F0
   \              7000        
   \   00000112   C08080800000       DC8 192, 128, 128, 128, 0, 0, 1, 7, 14, 60, 248, 224, 128, 0, 0, 254
   \              01070E3CF8E0
   \              800000FE    
   \   00000122   FF0300000000       DC8 255, 3, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 127, 254, 252, 240, 240
   \              00000001030F
   \              1F7FFEFCF0F0
   \   00000134   F07F7F3E1003       DC8 240, 127, 127, 62, 16, 3, 3, 15, 31, 31, 15, 15, 3, 4, 7, 7, 7, 7
   \              030F1F1F0F0F
   \              030407070707
   \   00000146   06000707070F       DC8 6, 0, 7, 7, 7, 15, 30, 63, 127, 127, 127, 121, 115, 63, 63, 31, 14
   \              1E3F7F7F7F79
   \              733F3F1F0E  
   \   00000157   000103030707       DC8 0, 1, 3, 3, 7, 7, 6, 14, 15, 15, 31, 63, 61, 8, 12, 31, 31, 31, 25
   \              060E0F0F1F3F
   \              3D080C1F1F1F
   \              19          
   \   0000016A   3C7F7F7FF3F0       DC8 60, 127, 127, 127, 243, 240, 252, 254, 63, 31, 7, 1, 0, 0, 0, 0, 0
   \              FCFE3F1F0701
   \              0000000000  
   \   0000017B   0000CFFF7000       DC8 0, 0, 207, 255, 112, 0, 3, 31, 126, 240, 192, 0, 0, 0, 0, 0, 0, 0
   \              031F7EF0C000
   \              000000000000
   \   0000018D   000000030301       DC8 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 192, 192, 64, 64, 64, 64, 248, 120
   \              0100000000C0
   \              C040404040F8
   \              78          
   \   000001A0   40C040585840       DC8 64, 192, 64, 88, 88, 64, 64, 64, 0, 0, 0, 0, 0, 128, 128, 128, 0, 0
   \              404000000000
   \              008080800000
   \   000001B2   0000000060F0       DC8 0, 0, 0, 0, 96, 240, 224, 32, 32, 32, 32, 48, 48, 56, 24, 16, 0, 0
   \              E02020202030
   \              303818100000
   \   000001C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000001
   \              010100000000
   \              00000000    
   \   000001DA   80E0F83F0F00       DC8 128, 224, 248, 63, 15, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 48, 96
   \              000000000003
   \              070E1C383060
   \   000001EC   E0C080000000       DC8 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 64, 96, 96, 112, 48, 24, 12, 7
   \              000000004060
   \              607030180C07
   \   000001FE   11083F7D66E7       DC8 17, 8, 63, 125, 102, 231, 227, 192, 192, 192, 224, 96, 0, 0, 0, 3
   \              E3C0C0C0E060
   \              00000003    
   \   0000020E   030300006060       DC8 3, 3, 0, 0, 96, 96, 96, 96, 96, 127, 127, 97, 97, 97, 97, 127, 127
   \              6060607F7F61
   \              6161617F7F  
   \   0000021F   6161E1E0E0C0       DC8 97, 97, 225, 224, 224, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              C00000000000
   \              000000000000
   \   00000231   80C0C0E07038       DC8 128, 192, 192, 224, 112, 56, 24, 12, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0
   \              180C07030100
   \              000000000000
   \   00000243   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 6, 6, 12, 12, 24, 24, 56
   \              000000000101
   \              030306060C0C
   \              181838      
   \   00000258   3030706060E0       DC8 48, 48, 112, 96, 96, 224, 192, 192, 192, 192, 192, 128, 128, 128
   \              C0C0C0C0C080
   \              8080        
   \   00000266   818080808080       DC8 129, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128
   \              000000000000
   \              0000808080  
   \   00000277   808080808080       DC8 128, 128, 128, 128, 128, 128, 128, 192, 192, 192, 192, 192, 96, 96
   \              80C0C0C0C0C0
   \              6060        
   \   00000285   603030301818       DC8 96, 48, 48, 48, 24, 24, 28, 12, 14, 6, 7, 3, 3, 1, 0, 0, 0, 0, 0, 0
   \              1C0C0E060703
   \              030100000000
   \              0000        
   \   00000299   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1
   \              000000000000
   \              000000000000
   \              0101010101  
   \   000002C7   010103030303       DC8 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1
   \              030303030303
   \              030303030101
   \              0101010101  
   \   000002DE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0000000000  
    344          /* 
    345            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    346            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0XC0,0XC0,0XC0,
    347            0XC0,0XC0,0X60,0X60,0X60,0X60,0X60,0X70,0X70,0X70,0X30,0X30,0X30,0X30,0X30,0X30,
    348            0X30,0X30,0X30,0X30,0X30,0X30,0X30,0X70,0X70,0X60,0X60,0X60,0X60,0X60,0XE0,0XC0,
    349            0XC0,0XC0,0XC0,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    350            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    351            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,0XE0,0X60,0X30,
    352            0X38,0X18,0X1C,0X0C,0X0E,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X00,0X00,
    353            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    354            0X80,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0XE0,0XE0,0X60,0X60,
    355            0XE0,0XE0,0XC0,0X81,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X0E,0X0C,0X1C,0X18,0X38,
    356            0X30,0X70,0X60,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    357            0X00,0X00,0X00,0X80,0XC0,0XF0,0X38,0X9C,0X8E,0XC7,0XC3,0XE1,0XF1,0XB0,0X00,0X00,
    358            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XE0,0XF0,0X70,0X78,0XF0,0XF0,0XE0,
    359            0X80,0X30,0XF8,0XF8,0XF8,0XF8,0X1C,0X3C,0XFC,0XF8,0XF0,0X00,0XF0,0XF8,0XFC,0XFC,
    360            0XCF,0XCF,0XFF,0XFF,0XFC,0XF8,0X70,0XFC,0XFF,0XFF,0XFF,0X0F,0X01,0X70,0X70,0X30,
    361            0X00,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0XE0,0XE0,0XEE,0XEE,0X0E,0X00,0XC0,0XC0,0X80,
    362            0X80,0X00,0X00,0X00,0X01,0X03,0X03,0X06,0X0C,0X3C,0X70,0XE0,0XC0,0X00,0X00,0X00,
    363            0X00,0XF0,0XFE,0X1F,0X03,0X00,0X00,0X01,0X01,0X01,0X03,0X0F,0X1F,0X7F,0XFE,0XFC,
    364            0XF0,0XE0,0X80,0X80,0X86,0XFE,0XFC,0XF0,0X87,0X1F,0X1E,0X78,0XF8,0XF8,0X7D,0X7F,
    365            0X1F,0X20,0X3F,0X3F,0X3F,0X3F,0X30,0X00,0X3F,0X3F,0X3F,0X7C,0XF0,0XF9,0XFF,0XFF,
    366            0XFF,0XCF,0X9F,0XFF,0XFB,0XF8,0X70,0X03,0X0F,0X1F,0X1F,0X3E,0X3C,0X36,0X76,0X7E,
    367            0X7E,0XFF,0XFF,0XEF,0X47,0X61,0XFC,0XFF,0XFF,0XCF,0XE3,0XF8,0XFE,0XFF,0X9F,0X87,
    368            0XE3,0XF0,0XFE,0XFC,0X3C,0X0C,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X7F,0XFC,0X80,
    369            0X00,0X1F,0XFF,0XF0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,
    370            0X1F,0X1F,0X0F,0X0F,0X07,0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XC0,
    371            0X00,0X00,0X00,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,
    372            0X03,0X03,0X03,0X01,0X01,0X00,0X00,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,
    373            0XC0,0X80,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,0X03,0X07,0X0F,
    374            0X0F,0X0F,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XFE,0X7F,0X03,
    375            0X00,0X00,0X00,0X03,0X07,0X1E,0X38,0X70,0XE0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,
    376            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X86,0X82,0XC2,0X62,0X3A,0X8F,0X43,
    377            0XFA,0XEE,0X32,0X3A,0X1A,0X02,0X02,0X02,0X00,0X00,0X00,0X00,0X00,0X1C,0X1C,0X1C,
    378            0X00,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0X09,0X09,0X09,0X09,0XF9,0XF9,0X09,
    379            0X08,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    380            0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XC0,0X60,0X38,0X1C,0X0F,0X07,0X01,0X00,0X00,
    381            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,0X07,0X0E,0X0C,0X18,
    382            0X18,0X30,0X30,0X60,0X60,0XC0,0XC2,0XC3,0X83,0X83,0X81,0X00,0X00,0X00,0X00,0X00,
    383            0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X06,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,
    384            0X00,0X00,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
    385            0X03,0X07,0X07,0X07,0X06,0X06,0X80,0X80,0X80,0XC0,0XC0,0XE0,0X60,0X70,0X30,0X38,
    386            0X18,0X1C,0X0E,0X06,0X07,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    387            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    388            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X06,
    389            0X06,0X06,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X1C,0X1C,0X18,0X18,0X18,0X18,
    390            0X18,0X18,0X18,0X18,0X1C,0X1C,0X1C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X06,0X06,
    391            0X06,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    392            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    393          */
    394          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    395          0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
    396          0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
    397          0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
    398          0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
    399          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    400          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
    401          0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    402          0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
    403          0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
    404          0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
    405          0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
    406          0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
    407          0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
    408          0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
    409          0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
    410          0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
    411          0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
    412          0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
    413          0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
    414          0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
    415          0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
    416          0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
    417          0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
    418          0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    419          0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
    420          0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
    421          0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
    422          0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
    423          0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
    424          0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
    425          0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
    426          0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
    427          0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
    428          0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    429          0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
    430          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
    431          0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
    432          0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
    433          0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
    434          0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
    435          0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    436          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    437          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    438          0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
    439          0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
    440          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    441          0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    442          
    443          };

   \                                 In section .text, align 4, keep-with-next
    444          const byte LIBLOGO60x58[480] = { 
   \                     LIBLOGO60x58:
   \   00000000                      ; Initializer data, 480 bytes
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000000A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000001E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 192, 224, 248, 252
   \              C0E0F8FC    
   \   00000046   FE7F3F0F0F07       DC8 254, 127, 63, 15, 15, 7, 7, 7, 135, 199
   \              070787C7    
   \   00000050   C7C7E7EFFFFF       DC8 199, 199, 231, 239, 255, 255, 255, 239, 231, 231
   \              FFEFE7E7    
   \   0000005A   E7E7E7EFFFFF       DC8 231, 231, 231, 239, 255, 255, 255, 239, 231, 231
   \              FFEFE7E7    
   \   00000064   E7E7E7F7070F       DC8 231, 231, 231, 247, 7, 15, 63, 127, 255, 254
   \              3F7FFFFE    
   \   0000006E   FCF0C0000000       DC8 252, 240, 192, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000078   000000D8DCDF       DC8 0, 0, 0, 216, 220, 223, 223, 223, 223, 215
   \              DFDFDFD7    
   \   00000082   010000000000       DC8 1, 0, 0, 0, 0, 0, 0, 62, 127, 255
   \              003E7FFF    
   \   0000008C   FFE3E1E1FFFF       DC8 255, 227, 225, 225, 255, 255, 255, 224, 224, 224
   \              FFE0E0E0    
   \   00000096   E0E0E0E0FFFF       DC8 224, 224, 224, 224, 255, 255, 255, 224, 224, 224
   \              FFE0E0E0    
   \   000000A0   E0C183070000       DC8 224, 193, 131, 7, 0, 0, 0, 0, 1, 215
   \              000001D7    
   \   000000AA   DFDFDFDFDCD8       DC8 223, 223, 223, 223, 220, 216, 0, 0, 0, 0
   \              00000000    
   \   000000B4   00000001030F       DC8 0, 0, 0, 1, 3, 15, 31, 63, 255, 255
   \              1F3FFFFF    
   \   000000BE   FEF8F0E0C080       DC8 254, 248, 240, 224, 192, 128, 0, 0, 248, 240
   \              0000F8F0    
   \   000000C8   E0C0C0C0FFFF       DC8 224, 192, 192, 192, 255, 255, 255, 192, 192, 192
   \              FFC0C0C0    
   \   000000D2   C0C0C0C0FFFF       DC8 192, 192, 192, 192, 255, 255, 255, 192, 224, 225
   \              FFC0E0E1    
   \   000000DC   F3FF7F3F00C0       DC8 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
   \              E0F8FEFF    
   \   000000E6   FFFF3F1F0701       DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000000FA   01070F3F7FFF       DC8 1, 7, 15, 63, 127, 255, 254, 252, 249, 243
   \              FEFCF9F3    
   \   00000104   C1810101FFFF       DC8 193, 129, 1, 1, 255, 255, 255, 1, 1, 1
   \              FF010101    
   \   0000010E   01010101FFFF       DC8 1, 1, 1, 1, 255, 255, 255, 3, 1, 129
   \              FF030181    
   \   00000118   C0F0FCFEFFFF       DC8 192, 240, 252, 254, 255, 255, 127, 63, 15, 7
   \              7F3F0F07    
   \   00000122   030000000000       DC8 3, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000136   000000000000       DC8 0, 0, 0, 0, 0, 0, 3, 7, 15, 63
   \              03070F3F    
   \   00000140   7FFFFFFFFBF3       DC8 127, 255, 255, 255, 251, 243, 227, 195, 3, 3
   \              E3C30303    
   \   0000014A   03030383C3F3       DC8 3, 3, 3, 131, 195, 243, 243, 251, 255, 255
   \              F3FBFFFF    
   \   00000154   FF7F3F0F0301       DC8 255, 127, 63, 15, 3, 1, 0, 0, 0, 0
   \              00000000    
   \   0000015E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   00000172   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000017C   00000307071F       DC8 0, 0, 3, 7, 7, 31, 63, 127, 255, 254
   \              3F7FFFFE    
   \   00000186   FCFCFEFFFF7F       DC8 252, 252, 254, 255, 255, 127, 63, 15, 7, 3
   \              3F0F0703    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   0000019A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000001A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000001AE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
   \              00000003    
   \   000001C2   070F0F070100       DC8 7, 15, 15, 7, 1, 0, 0, 0, 0, 0
   \              00000000    
   \   000001CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \   000001D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
    445            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    446            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    447            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    448            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    449            0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
    450            0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
    451            0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
    452            0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
    453            0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
    454            0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
    455            0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
    456            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
    457            0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
    458            0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
    459            0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
    460            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
    461            0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
    462            0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
    463            0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    464            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
    465            0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
    466            0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
    467            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    468            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
    469            0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
    470            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    471            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    472            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    473            0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    474            0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
    475          }; 

   \                                 In section .text, align 4, keep-with-next
    476          void LCD_WrDat(byte data)
    477          {
    478          	byte i=8;
   \                     LCD_WrDat:
   \   00000000   0821               MOVS     R1,#+8
    479          	//LCD_CS=0;;
    480          	GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(17));;;;
   \   00000002   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   00000006   1268               LDR      R2,[R2, #+0]
   \   00000008   52F40032           ORRS     R2,R2,#0x20000
   \   0000000C   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000010   1A60               STR      R2,[R3, #+0]
    481                  asm("nop"); 
   \   00000012   00BF               nop              
    482                GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(14));;;;
   \   00000014   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   00000018   1268               LDR      R2,[R2, #+0]
   \   0000001A   32F48042           BICS     R2,R2,#0x4000
   \   0000001E   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000022   1A60               STR      R2,[R3, #+0]
    483                asm("nop");    
   \   00000024   00BF               nop              
   \   00000026   19E0               B.N      ??LCD_WrDat_0
    484            while(i--)
    485            {
    486              if(data&0x80){GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(15));;;;}
    487              else{GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(15));;;;}
   \                     ??LCD_WrDat_1:
   \   00000028   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   0000002C   1268               LDR      R2,[R2, #+0]
   \   0000002E   32F40042           BICS     R2,R2,#0x8000
   \   00000032   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000036   1A60               STR      R2,[R3, #+0]
    488              GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14)); 
   \                     ??LCD_WrDat_2:
   \   00000038   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   0000003C   1268               LDR      R2,[R2, #+0]
   \   0000003E   52F48042           ORRS     R2,R2,#0x4000
   \   00000042   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000046   1A60               STR      R2,[R3, #+0]
    489              asm("nop");;;;
   \   00000048   00BF               nop              
    490          		//asm("nop");            
    491              GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(14));;;;;    
   \   0000004A   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   0000004E   1268               LDR      R2,[R2, #+0]
   \   00000050   32F48042           BICS     R2,R2,#0x4000
   \   00000054   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000058   1A60               STR      R2,[R3, #+0]
    492              data<<=1;    
   \   0000005A   4000               LSLS     R0,R0,#+1
   \                     ??LCD_WrDat_0:
   \   0000005C   0A00               MOVS     R2,R1
   \   0000005E   511E               SUBS     R1,R2,#+1
   \   00000060   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000062   002A               CMP      R2,#+0
   \   00000064   0AD0               BEQ.N    ??LCD_WrDat_3
   \   00000066   0206               LSLS     R2,R0,#+24
   \   00000068   DED5               BPL.N    ??LCD_WrDat_1
   \   0000006A   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   0000006E   1268               LDR      R2,[R2, #+0]
   \   00000070   52F40042           ORRS     R2,R2,#0x8000
   \   00000074   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000078   1A60               STR      R2,[R3, #+0]
   \   0000007A   DDE7               B.N      ??LCD_WrDat_2
    493            }
    494          	//LCD_CS=1;
    495          }
   \                     ??LCD_WrDat_3:
   \   0000007C   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
    496          void LCD_WrCmd(byte cmd)
    497          {
    498          	byte i=8;
   \                     LCD_WrCmd:
   \   00000000   0821               MOVS     R1,#+8
    499          	
    500          	//LCD_CS=0;;
    501            GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(17));;;;;
   \   00000002   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   00000006   1268               LDR      R2,[R2, #+0]
   \   00000008   32F40032           BICS     R2,R2,#0x20000
   \   0000000C   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000010   1A60               STR      R2,[R3, #+0]
    502            GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(14));;;;;
   \   00000012   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   00000016   1268               LDR      R2,[R2, #+0]
   \   00000018   32F48042           BICS     R2,R2,#0x4000
   \   0000001C   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000020   1A60               STR      R2,[R3, #+0]
   \   00000022   19E0               B.N      ??LCD_WrCmd_0
    503            //asm("nop");   
    504            while(i--)
    505            {
    506              if(cmd&0x80){GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(15));;;;;}
    507              else{GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(15));;;;;;}
   \                     ??LCD_WrCmd_1:
   \   00000024   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   00000028   1268               LDR      R2,[R2, #+0]
   \   0000002A   32F40042           BICS     R2,R2,#0x8000
   \   0000002E   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000032   1A60               STR      R2,[R3, #+0]
    508              GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14));;;;;
   \                     ??LCD_WrCmd_2:
   \   00000034   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   00000038   1268               LDR      R2,[R2, #+0]
   \   0000003A   52F48042           ORRS     R2,R2,#0x4000
   \   0000003E   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000042   1A60               STR      R2,[R3, #+0]
    509              asm("nop");;;;
   \   00000044   00BF               nop              
    510          		//asm("nop");             
    511              GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(14));;;;;    
   \   00000046   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   0000004A   1268               LDR      R2,[R2, #+0]
   \   0000004C   32F48042           BICS     R2,R2,#0x4000
   \   00000050   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000054   1A60               STR      R2,[R3, #+0]
    512              cmd<<=1;;;;;   
   \   00000056   4000               LSLS     R0,R0,#+1
   \                     ??LCD_WrCmd_0:
   \   00000058   0A00               MOVS     R2,R1
   \   0000005A   511E               SUBS     R1,R2,#+1
   \   0000005C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005E   002A               CMP      R2,#+0
   \   00000060   0AD0               BEQ.N    ??LCD_WrCmd_3
   \   00000062   0206               LSLS     R2,R0,#+24
   \   00000064   DED5               BPL.N    ??LCD_WrCmd_1
   \   00000066   ........           LDR.W    R2,??DataTable8  ;; 0x400ff000
   \   0000006A   1268               LDR      R2,[R2, #+0]
   \   0000006C   52F40042           ORRS     R2,R2,#0x8000
   \   00000070   ........           LDR.W    R3,??DataTable8  ;; 0x400ff000
   \   00000074   1A60               STR      R2,[R3, #+0]
   \   00000076   DDE7               B.N      ??LCD_WrCmd_2
    513            } 	
    514          	//LCD_CS=1;
    515          }
   \                     ??LCD_WrCmd_3:
   \   00000078   7047               BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    516          void LCD_Set_Pos(byte x, byte y)
    517          { 
   \                     LCD_Set_Pos:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    518            LCD_WrCmd(0xb0+y);
   \   00000004   B1F15000           SUBS     R0,R1,#+80
   \   00000008   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   ........           BL       LCD_WrCmd
    519            LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   0000000E   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   2009               LSRS     R0,R4,#+4
   \   00000012   50F01000           ORRS     R0,R0,#0x10
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   ........           BL       LCD_WrCmd
    520            LCD_WrCmd((x&0x0f)|0x01); 
   \   0000001C   14F00F00           ANDS     R0,R4,#0xF
   \   00000020   50F00100           ORRS     R0,R0,#0x1
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       LCD_WrCmd
    521          } 
   \   0000002A   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    522          void LCD_Fill(byte bmp_data)
    523          {
   \                     LCD_Fill:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    524          	byte y,x;
    525          	
    526          	for(y=0;y<8;y++)
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   08E0               B.N      ??LCD_Fill_0
    527          	{
    528          		LCD_WrCmd(0xb0+y);
    529          		LCD_WrCmd(0x01);
    530          		LCD_WrCmd(0x10);
    531          		for(x=0;x<X_WIDTH;x++)
    532          			LCD_WrDat(bmp_data);
   \                     ??LCD_Fill_1:
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   ........           BL       LCD_WrDat
   \   00000010   761C               ADDS     R6,R6,#+1
   \                     ??LCD_Fill_2:
   \   00000012   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   802E               CMP      R6,#+128
   \   00000016   F7D3               BCC.N    ??LCD_Fill_1
   \   00000018   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_Fill_0:
   \   0000001A   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   082D               CMP      R5,#+8
   \   0000001E   0CD2               BCS.N    ??LCD_Fill_3
   \   00000020   B5F15000           SUBS     R0,R5,#+80
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       LCD_WrCmd
   \   0000002A   0120               MOVS     R0,#+1
   \   0000002C   ........           BL       LCD_WrCmd
   \   00000030   1020               MOVS     R0,#+16
   \   00000032   ........           BL       LCD_WrCmd
   \   00000036   0026               MOVS     R6,#+0
   \   00000038   EBE7               B.N      ??LCD_Fill_2
    533          	}
    534          }
   \                     ??LCD_Fill_3:
   \   0000003A   70BD               POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    535          void LCD_CLS(void)
    536          {
   \                     LCD_CLS:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    537          	byte y,x;	
    538          	for(y=0;y<8;y++)
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   07E0               B.N      ??LCD_CLS_0
    539          	{
    540          		LCD_WrCmd(0xb0+y);
    541          		LCD_WrCmd(0x01);
    542          		LCD_WrCmd(0x10); 
    543          		for(x=0;x<X_WIDTH;x++)
    544          			LCD_WrDat(0);
   \                     ??LCD_CLS_1:
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ........           BL       LCD_WrDat
   \   0000000C   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_CLS_2:
   \   0000000E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   802D               CMP      R5,#+128
   \   00000012   F8D3               BCC.N    ??LCD_CLS_1
   \   00000014   641C               ADDS     R4,R4,#+1
   \                     ??LCD_CLS_0:
   \   00000016   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   082C               CMP      R4,#+8
   \   0000001A   0CD2               BCS.N    ??LCD_CLS_3
   \   0000001C   B4F15000           SUBS     R0,R4,#+80
   \   00000020   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   ........           BL       LCD_WrCmd
   \   00000026   0120               MOVS     R0,#+1
   \   00000028   ........           BL       LCD_WrCmd
   \   0000002C   1020               MOVS     R0,#+16
   \   0000002E   ........           BL       LCD_WrCmd
   \   00000032   0025               MOVS     R5,#+0
   \   00000034   EBE7               B.N      ??LCD_CLS_2
    545          	}
    546          }
   \                     ??LCD_CLS_3:
   \   00000036   31BD               POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    547          void LCD_DLY_ms(word ms)
    548          {                         
   \                     LCD_DLY_ms:
   \   00000000   07E0               B.N      ??LCD_DLY_ms_0
    549            word a;
    550            while(ms)
    551            {
    552              a=13350;
   \                     ??LCD_DLY_ms_1:
   \   00000002   43F22641           MOVW     R1,#+13350
    553              while(a--);
   \                     ??LCD_DLY_ms_2:
   \   00000006   0A00               MOVS     R2,R1
   \   00000008   511E               SUBS     R1,R2,#+1
   \   0000000A   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   002A               CMP      R2,#+0
   \   0000000E   FAD1               BNE.N    ??LCD_DLY_ms_2
    554              ms--;
   \   00000010   401E               SUBS     R0,R0,#+1
    555            }
   \                     ??LCD_DLY_ms_0:
   \   00000012   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0028               CMP      R0,#+0
   \   00000016   F4D1               BNE.N    ??LCD_DLY_ms_1
    556            return;
   \   00000018   7047               BX       LR               ;; return
    557          }
    558          

   \                                 In section .text, align 2, keep-with-next
    559          void LCD_Init(void)        
    560          {
   \                     LCD_Init:
   \   00000000   80B5               PUSH     {R7,LR}
    561                  //设置PORTA pin14,pin15为GPIO口 
    562          	PORTA_PCR14=(0|PORT_PCR_MUX(1));
   \   00000002   ........           LDR.W    R0,??DataTable8_1  ;; 0x40049038
   \   00000006   4FF48071           MOV      R1,#+256
   \   0000000A   0160               STR      R1,[R0, #+0]
    563          	PORTA_PCR15=(0|PORT_PCR_MUX(1)); 
   \   0000000C   ........           LDR.W    R0,??DataTable8_2  ;; 0x4004903c
   \   00000010   4FF48071           MOV      R1,#+256
   \   00000014   0160               STR      R1,[R0, #+0]
    564          	PORTA_PCR16=(0|PORT_PCR_MUX(1));
   \   00000016   ........           LDR.W    R0,??DataTable8_3  ;; 0x40049040
   \   0000001A   4FF48071           MOV      R1,#+256
   \   0000001E   0160               STR      R1,[R0, #+0]
    565          	PORTA_PCR17=(0|PORT_PCR_MUX(1)); 
   \   00000020   ........           LDR.W    R0,??DataTable8_4  ;; 0x40049044
   \   00000024   4FF48071           MOV      R1,#+256
   \   00000028   0160               STR      R1,[R0, #+0]
    566          	
    567          	//设置PORTA pin14,pin15为输出方向;pin16,pin17为输入方向
    568          	GPIOA_PDDR=GPIO_PDDR_PDD(GPIO_PIN(14)|GPIO_PIN(15)|GPIO_PIN(16)|GPIO_PIN(17));
   \   0000002A   ........           LDR.W    R0,??DataTable8_5  ;; 0x400ff014
   \   0000002E   5FF47031           MOVS     R1,#+245760
   \   00000032   0160               STR      R1,[R0, #+0]
    569          	
    570            
    571          	GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(14));
   \   00000034   ........           LDR.W    R0,??DataTable8  ;; 0x400ff000
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   50F48040           ORRS     R0,R0,#0x4000
   \   0000003E   ........           LDR.W    R1,??DataTable8  ;; 0x400ff000
   \   00000042   0860               STR      R0,[R1, #+0]
    572          	//LCD_CS=1;	//预制SLK和SS为高电平   	
    573          	
    574          	GPIOA_PDOR &= ~GPIO_PDOR_PDO(GPIO_PIN(16));
   \   00000044   ........           LDR.W    R0,??DataTable8  ;; 0x400ff000
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   30F48030           BICS     R0,R0,#0x10000
   \   0000004E   ........           LDR.W    R1,??DataTable8  ;; 0x400ff000
   \   00000052   0860               STR      R0,[R1, #+0]
    575          	LCD_DLY_ms(50);
   \   00000054   3220               MOVS     R0,#+50
   \   00000056   ........           BL       LCD_DLY_ms
    576          	GPIOA_PDOR |=  GPIO_PDOR_PDO(GPIO_PIN(16));
   \   0000005A   ........           LDR.W    R0,??DataTable8  ;; 0x400ff000
   \   0000005E   0068               LDR      R0,[R0, #+0]
   \   00000060   50F48030           ORRS     R0,R0,#0x10000
   \   00000064   ........           LDR.W    R1,??DataTable8  ;; 0x400ff000
   \   00000068   0860               STR      R0,[R1, #+0]
    577          
    578            LCD_WrCmd(0xae);//--turn off oled panel
   \   0000006A   AE20               MOVS     R0,#+174
   \   0000006C   ........           BL       LCD_WrCmd
    579            LCD_WrCmd(0x00);//---set low column address
   \   00000070   0020               MOVS     R0,#+0
   \   00000072   ........           BL       LCD_WrCmd
    580            LCD_WrCmd(0x10);//---set high column address
   \   00000076   1020               MOVS     R0,#+16
   \   00000078   ........           BL       LCD_WrCmd
    581            LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
   \   0000007C   4020               MOVS     R0,#+64
   \   0000007E   ........           BL       LCD_WrCmd
    582            LCD_WrCmd(0x81);//--set contrast control register
   \   00000082   8120               MOVS     R0,#+129
   \   00000084   ........           BL       LCD_WrCmd
    583            LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
   \   00000088   CF20               MOVS     R0,#+207
   \   0000008A   ........           BL       LCD_WrCmd
    584            LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   \   0000008E   A120               MOVS     R0,#+161
   \   00000090   ........           BL       LCD_WrCmd
    585            LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   \   00000094   C820               MOVS     R0,#+200
   \   00000096   ........           BL       LCD_WrCmd
    586            LCD_WrCmd(0xa6);//--set normal display
   \   0000009A   A620               MOVS     R0,#+166
   \   0000009C   ........           BL       LCD_WrCmd
    587            LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
   \   000000A0   A820               MOVS     R0,#+168
   \   000000A2   ........           BL       LCD_WrCmd
    588            LCD_WrCmd(0x3f);//--1/64 duty
   \   000000A6   3F20               MOVS     R0,#+63
   \   000000A8   ........           BL       LCD_WrCmd
    589            LCD_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
   \   000000AC   D320               MOVS     R0,#+211
   \   000000AE   ........           BL       LCD_WrCmd
    590            LCD_WrCmd(0x00);//-not offset
   \   000000B2   0020               MOVS     R0,#+0
   \   000000B4   ........           BL       LCD_WrCmd
    591            LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
   \   000000B8   D520               MOVS     R0,#+213
   \   000000BA   ........           BL       LCD_WrCmd
    592            LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
   \   000000BE   8020               MOVS     R0,#+128
   \   000000C0   ........           BL       LCD_WrCmd
    593            LCD_WrCmd(0xd9);//--set pre-charge period
   \   000000C4   D920               MOVS     R0,#+217
   \   000000C6   ........           BL       LCD_WrCmd
    594            LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   000000CA   F120               MOVS     R0,#+241
   \   000000CC   ........           BL       LCD_WrCmd
    595            LCD_WrCmd(0xda);//--set com pins hardware configuration
   \   000000D0   DA20               MOVS     R0,#+218
   \   000000D2   ........           BL       LCD_WrCmd
    596            LCD_WrCmd(0x12);
   \   000000D6   1220               MOVS     R0,#+18
   \   000000D8   ........           BL       LCD_WrCmd
    597            LCD_WrCmd(0xdb);//--set vcomh
   \   000000DC   DB20               MOVS     R0,#+219
   \   000000DE   ........           BL       LCD_WrCmd
    598            LCD_WrCmd(0x40);//Set VCOM Deselect Level
   \   000000E2   4020               MOVS     R0,#+64
   \   000000E4   ........           BL       LCD_WrCmd
    599            LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
   \   000000E8   2020               MOVS     R0,#+32
   \   000000EA   ........           BL       LCD_WrCmd
    600            LCD_WrCmd(0x02);//
   \   000000EE   0220               MOVS     R0,#+2
   \   000000F0   ........           BL       LCD_WrCmd
    601            LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
   \   000000F4   8D20               MOVS     R0,#+141
   \   000000F6   ........           BL       LCD_WrCmd
    602            LCD_WrCmd(0x14);//--set(0x10) disable
   \   000000FA   1420               MOVS     R0,#+20
   \   000000FC   ........           BL       LCD_WrCmd
    603            LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
   \   00000100   A420               MOVS     R0,#+164
   \   00000102   ........           BL       LCD_WrCmd
    604            LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
   \   00000106   A620               MOVS     R0,#+166
   \   00000108   ........           BL       LCD_WrCmd
    605            LCD_WrCmd(0xaf);//--turn on oled panel
   \   0000010C   AF20               MOVS     R0,#+175
   \   0000010E   ........           BL       LCD_WrCmd
    606            LCD_Fill(0x00);  //初始清屏
   \   00000112   0020               MOVS     R0,#+0
   \   00000114   ........           BL       LCD_Fill
    607            LCD_Set_Pos(0,0);  
   \   00000118   0021               MOVS     R1,#+0
   \   0000011A   0020               MOVS     R0,#+0
   \   0000011C   ........           BL       LCD_Set_Pos
    608          	
    609          } 
   \   00000120   01BD               POP      {R0,PC}          ;; return
    610          //==============================================================
    611          //函数名： void LCD_PutPixel(byte x,byte y)
    612          //功能描述：绘制一个点（x,y）
    613          //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
    614          //返回：无
    615          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    616          void LCD_PutPixel(byte x,byte y)
    617          {
   \                     LCD_PutPixel:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    618          	byte data1;  //data1当前点的数据 
    619          	 
    620            LCD_Set_Pos(x,y); 
   \   00000006   2900               MOVS     R1,R5
   \   00000008   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   ........           BL       LCD_Set_Pos
    621          	data1 = 0x01<<(y%8); 	
   \   00000012   0120               MOVS     R0,#+1
   \   00000014   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0821               MOVS     R1,#+8
   \   00000018   95FBF1F2           SDIV     R2,R5,R1
   \   0000001C   02FB1152           MLS      R2,R2,R1,R5
   \   00000020   10FA02F6           LSLS     R6,R0,R2
    622          	LCD_WrCmd(0xb0+(y>>3));
   \   00000024   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   E808               LSRS     R0,R5,#+3
   \   00000028   5038               SUBS     R0,R0,#+80
   \   0000002A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   ........           BL       LCD_WrCmd
    623          	LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   00000030   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   2009               LSRS     R0,R4,#+4
   \   00000034   50F01000           ORRS     R0,R0,#0x10
   \   00000038   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   ........           BL       LCD_WrCmd
    624          	LCD_WrCmd((x&0x0f)|0x00);
   \   0000003E   14F00F00           ANDS     R0,R4,#0xF
   \   00000042   ........           BL       LCD_WrCmd
    625          	LCD_WrDat(data1); 	 	
   \   00000046   3000               MOVS     R0,R6
   \   00000048   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   ........           BL       LCD_WrDat
    626          }
   \   0000004E   70BD               POP      {R4-R6,PC}       ;; return
    627          //==============================================================
    628          //函数名： void LCD_Rectangle(byte x1,byte y1,
    629          //                   byte x2,byte y2,byte color,byte gif)
    630          //功能描述：绘制一个实心矩形
    631          //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
    632          //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
    633          //返回：无
    634          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    635          void LCD_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
    636          {
   \                     LCD_Rectangle:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0500               MOVS     R5,R0
   \   00000006   0E00               MOVS     R6,R1
   \   00000008   1700               MOVS     R7,R2
   \   0000000A   9846               MOV      R8,R3
   \   0000000C   089C               LDR      R4,[SP, #+32]
    637          	byte n; 
    638          		
    639          	LCD_Set_Pos(x1,y1>>3);
   \   0000000E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000010   F108               LSRS     R1,R6,#+3
   \   00000012   2800               MOVS     R0,R5
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   ........           BL       LCD_Set_Pos
    640          	for(n=x1;n<=x2;n++)
   \   0000001A   A946               MOV      R9,R5
   \   0000001C   12E0               B.N      ??LCD_Rectangle_0
    641          	{
    642          		LCD_WrDat(0x01<<(y1%8)); 			
   \                     ??LCD_Rectangle_1:
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0821               MOVS     R1,#+8
   \   00000024   96FBF1F2           SDIV     R2,R6,R1
   \   00000028   02FB1162           MLS      R2,R2,R1,R6
   \   0000002C   9040               LSLS     R0,R0,R2
   \   0000002E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   ........           BL       LCD_WrDat
    643          		if(gif == 1) 	LCD_DLY_ms(50);
   \   00000034   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   012C               CMP      R4,#+1
   \   00000038   02D1               BNE.N    ??LCD_Rectangle_2
   \   0000003A   3220               MOVS     R0,#+50
   \   0000003C   ........           BL       LCD_DLY_ms
    644          	}  
   \                     ??LCD_Rectangle_2:
   \   00000040   19F10109           ADDS     R9,R9,#+1
   \                     ??LCD_Rectangle_0:
   \   00000044   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000046   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004A   4F45               CMP      R7,R9
   \   0000004C   E7D2               BCS.N    ??LCD_Rectangle_1
    645          	LCD_Set_Pos(x1,y2>>3);
   \   0000004E   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000052   5FEAD801           LSRS     R1,R8,#+3
   \   00000056   2800               MOVS     R0,R5
   \   00000058   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   ........           BL       LCD_Set_Pos
    646            for(n=x1;n<=x2;n++)
   \   0000005E   A946               MOV      R9,R5
   \   00000060   13E0               B.N      ??LCD_Rectangle_3
    647          	{
    648          		LCD_WrDat(0x01<<(y2%8)); 			
   \                     ??LCD_Rectangle_4:
   \   00000062   0120               MOVS     R0,#+1
   \   00000064   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000068   0821               MOVS     R1,#+8
   \   0000006A   98FBF1F2           SDIV     R2,R8,R1
   \   0000006E   02FB1182           MLS      R2,R2,R1,R8
   \   00000072   9040               LSLS     R0,R0,R2
   \   00000074   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   ........           BL       LCD_WrDat
    649          		if(gif == 1) 	LCD_DLY_ms(5);
   \   0000007A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007C   012C               CMP      R4,#+1
   \   0000007E   02D1               BNE.N    ??LCD_Rectangle_5
   \   00000080   0520               MOVS     R0,#+5
   \   00000082   ........           BL       LCD_DLY_ms
    650          	}
   \                     ??LCD_Rectangle_5:
   \   00000086   19F10109           ADDS     R9,R9,#+1
   \                     ??LCD_Rectangle_3:
   \   0000008A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000008C   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000090   4F45               CMP      R7,R9
   \   00000092   E6D2               BCS.N    ??LCD_Rectangle_4
    651          	
    652          }  
   \   00000094   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
    653          //==============================================================
    654          //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
    655          //功能描述：写入一组标准ASCII字符串
    656          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    657          //返回：无
    658          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    659          void LCD_P6x8Str(byte x,byte y,byte ch[])
    660          {
   \                     LCD_P6x8Str:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
    661            byte c=0,i=0,j=0;      
   \   0000000A   0027               MOVS     R7,#+0
   \   0000000C   5FF00008           MOVS     R8,#+0
   \   00000010   5FF00009           MOVS     R9,#+0
   \   00000014   15E0               B.N      ??LCD_P6x8Str_0
    662            while (ch[j]!='\0')
    663            {    
    664              c =ch[j]-32;
    665              if(x>126){x=0;y++;}
    666              LCD_Set_Pos(x,y);    
    667            	for(i=0;i<6;i++)     
    668            	  LCD_WrDat(F6x8[c][i]);  
   \                     ??LCD_P6x8Str_1:
   \   00000016   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0620               MOVS     R0,#+6
   \   0000001E   ........           ADR.W    R1,F6x8
   \   00000022   00FB0710           MLA      R0,R0,R7,R1
   \   00000026   18F80000           LDRB     R0,[R8, R0]
   \   0000002A   ........           BL       LCD_WrDat
   \   0000002E   18F10108           ADDS     R8,R8,#+1
   \                     ??LCD_P6x8Str_2:
   \   00000032   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000036   B8F1060F           CMP      R8,#+6
   \   0000003A   ECD3               BCC.N    ??LCD_P6x8Str_1
    669            	x+=6;
   \   0000003C   A41D               ADDS     R4,R4,#+6
    670            	j++;
   \   0000003E   19F10109           ADDS     R9,R9,#+1
   \                     ??LCD_P6x8Str_0:
   \   00000042   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000046   19F80600           LDRB     R0,[R9, R6]
   \   0000004A   0028               CMP      R0,#+0
   \   0000004C   13D0               BEQ.N    ??LCD_P6x8Str_3
   \   0000004E   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000052   19F80600           LDRB     R0,[R9, R6]
   \   00000056   B0F12007           SUBS     R7,R0,#+32
   \   0000005A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   7F2C               CMP      R4,#+127
   \   0000005E   01D3               BCC.N    ??LCD_P6x8Str_4
   \   00000060   0024               MOVS     R4,#+0
   \   00000062   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_P6x8Str_4:
   \   00000064   2900               MOVS     R1,R5
   \   00000066   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000068   2000               MOVS     R0,R4
   \   0000006A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   ........           BL       LCD_Set_Pos
   \   00000070   5FF00008           MOVS     R8,#+0
   \   00000074   DDE7               B.N      ??LCD_P6x8Str_2
    671            }
    672          }
   \                     ??LCD_P6x8Str_3:
   \   00000076   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
    673          //==============================================================
    674          //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
    675          //功能描述：写入一组标准ASCII字符串
    676          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
    677          //返回：无
    678          //==============================================================  

   \                                 In section .text, align 2, keep-with-next
    679          void LCD_P8x16Str(byte x,byte y,byte ch[])
    680          {
   \                     LCD_P8x16Str:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
    681            byte c=0,i=0,j=0;
   \   0000000A   0027               MOVS     R7,#+0
   \   0000000C   5FF00008           MOVS     R8,#+0
   \   00000010   5FF00009           MOVS     R9,#+0
   \   00000014   13E0               B.N      ??LCD_P8x16Str_0
    682                  
    683            while (ch[j]!='\0')
    684            {    
    685              c =ch[j]-32;
    686              if(x>120){x=0;y++;}
    687              LCD_Set_Pos(x,y);    
    688            	for(i=0;i<8;i++)     
    689            	  LCD_WrDat(F8X16[c*16+i]);
    690            	LCD_Set_Pos(x,y+1);    
    691            	for(i=0;i<8;i++)     
    692            	  LCD_WrDat(F8X16[c*16+i+8]);  
   \                     ??LCD_P8x16Str_1:
   \   00000016   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000018   3801               LSLS     R0,R7,#+4
   \   0000001A   50FA88F0           UXTAB    R0,R0,R8
   \   0000001E   ........           ADR.W    R1,F8X16
   \   00000022   4018               ADDS     R0,R0,R1
   \   00000024   007A               LDRB     R0,[R0, #+8]
   \   00000026   ........           BL       LCD_WrDat
   \   0000002A   18F10108           ADDS     R8,R8,#+1
   \                     ??LCD_P8x16Str_2:
   \   0000002E   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000032   B8F1080F           CMP      R8,#+8
   \   00000036   EED3               BCC.N    ??LCD_P8x16Str_1
    693            	x+=8;
   \   00000038   0834               ADDS     R4,R4,#+8
    694            	j++;
   \   0000003A   19F10109           ADDS     R9,R9,#+1
   \                     ??LCD_P8x16Str_0:
   \   0000003E   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000042   19F80600           LDRB     R0,[R9, R6]
   \   00000046   0028               CMP      R0,#+0
   \   00000048   2CD0               BEQ.N    ??LCD_P8x16Str_3
   \   0000004A   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004E   19F80600           LDRB     R0,[R9, R6]
   \   00000052   B0F12007           SUBS     R7,R0,#+32
   \   00000056   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   792C               CMP      R4,#+121
   \   0000005A   01D3               BCC.N    ??LCD_P8x16Str_4
   \   0000005C   0024               MOVS     R4,#+0
   \   0000005E   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_P8x16Str_4:
   \   00000060   2900               MOVS     R1,R5
   \   00000062   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000064   2000               MOVS     R0,R4
   \   00000066   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   ........           BL       LCD_Set_Pos
   \   0000006C   5FF00008           MOVS     R8,#+0
   \   00000070   0AE0               B.N      ??LCD_P8x16Str_5
   \                     ??LCD_P8x16Str_6:
   \   00000072   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000074   3801               LSLS     R0,R7,#+4
   \   00000076   50FA88F0           UXTAB    R0,R0,R8
   \   0000007A   ........           ADR.W    R1,F8X16
   \   0000007E   405C               LDRB     R0,[R0, R1]
   \   00000080   ........           BL       LCD_WrDat
   \   00000084   18F10108           ADDS     R8,R8,#+1
   \                     ??LCD_P8x16Str_5:
   \   00000088   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000008C   B8F1080F           CMP      R8,#+8
   \   00000090   EFD3               BCC.N    ??LCD_P8x16Str_6
   \   00000092   691C               ADDS     R1,R5,#+1
   \   00000094   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000096   2000               MOVS     R0,R4
   \   00000098   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   ........           BL       LCD_Set_Pos
   \   0000009E   5FF00008           MOVS     R8,#+0
   \   000000A2   C4E7               B.N      ??LCD_P8x16Str_2
    695            }
    696          }
   \                     ??LCD_P8x16Str_3:
   \   000000A4   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
    697          //输出汉字字符串

   \                                 In section .text, align 2, keep-with-next
    698          void LCD_P14x16Str(byte x,byte y,byte ch[])
    699          {
   \                     LCD_P14x16Str:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0600               MOVS     R6,R0
   \   00000006   0C00               MOVS     R4,R1
   \   00000008   1500               MOVS     R5,R2
    700          	byte wm=0,ii = 0;
   \   0000000A   5FF00009           MOVS     R9,#+0
   \   0000000E   0027               MOVS     R7,#+0
    701          	word adder=1; 
   \   00000010   5FF00108           MOVS     R8,#+1
   \   00000014   0BE0               B.N      ??LCD_P14x16Str_0
    702          	
    703          	while(ch[ii] != '\0')
    704          	{
    705            	wm = 0;
    706            	adder = 1;
    707            	while(F14x16_Idx[wm] > 127)
    708            	{
    709            		if(F14x16_Idx[wm] == ch[ii])
    710            		{
    711            			if(F14x16_Idx[wm + 1] == ch[ii + 1])
    712            			{
    713            				adder = wm * 14;
    714            				break;
    715            			}
    716            		}
    717            		wm += 2;			
    718            	}
    719            	if(x>118){x=0;y++;}
    720            	LCD_Set_Pos(x , y); 
    721            	if(adder != 1)// 显示汉字					
    722            	{
    723            		LCD_Set_Pos(x , y);
    724            		for(wm = 0;wm < 14;wm++)               
    725            		{
    726            			LCD_WrDat(F14x16[adder]);	
    727            			adder += 1;
    728            		}      
    729            		LCD_Set_Pos(x,y + 1); 
    730            		for(wm = 0;wm < 14;wm++)          
    731            		{
    732            			LCD_WrDat(F14x16[adder]);
    733            			adder += 1;
    734            		}   		
    735            	}
    736            	else			  //显示空白字符			
    737            	{
    738            		ii += 1;
    739                LCD_Set_Pos(x,y);
    740            		for(wm = 0;wm < 16;wm++)
    741            		{
    742            				LCD_WrDat(0);
    743            		}
    744            		LCD_Set_Pos(x,y + 1);
    745            		for(wm = 0;wm < 16;wm++)
    746            		{   		
    747            				LCD_WrDat(0);	
   \                     ??LCD_P14x16Str_1:
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   ........           BL       LCD_WrDat
    748            		}
   \   0000001C   19F10109           ADDS     R9,R9,#+1
   \                     ??LCD_P14x16Str_2:
   \   00000020   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000024   B9F1100F           CMP      R9,#+16
   \   00000028   F5D3               BCC.N    ??LCD_P14x16Str_1
    749            	}
    750            	x += 14;
   \                     ??LCD_P14x16Str_3:
   \   0000002A   0E36               ADDS     R6,R6,#+14
    751            	ii += 2;
   \   0000002C   BF1C               ADDS     R7,R7,#+2
   \                     ??LCD_P14x16Str_0:
   \   0000002E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   785D               LDRB     R0,[R7, R5]
   \   00000032   0028               CMP      R0,#+0
   \   00000034   00F08B80           BEQ.W    ??LCD_P14x16Str_4
   \   00000038   5FF00009           MOVS     R9,#+0
   \   0000003C   5FF00108           MOVS     R8,#+1
   \   00000040   01E0               B.N      ??LCD_P14x16Str_5
   \                     ??LCD_P14x16Str_6:
   \   00000042   19F10209           ADDS     R9,R9,#+2
   \                     ??LCD_P14x16Str_5:
   \   00000046   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004A   ........           ADR.W    R0,F14x16_Idx
   \   0000004E   19F80000           LDRB     R0,[R9, R0]
   \   00000052   8028               CMP      R0,#+128
   \   00000054   1AD3               BCC.N    ??LCD_P14x16Str_7
   \   00000056   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000005A   ........           ADR.W    R0,F14x16_Idx
   \   0000005E   19F80000           LDRB     R0,[R9, R0]
   \   00000062   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000064   795D               LDRB     R1,[R7, R5]
   \   00000066   8842               CMP      R0,R1
   \   00000068   EBD1               BNE.N    ??LCD_P14x16Str_6
   \   0000006A   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000006E   ........           ADR.W    R0,F14x16_Idx
   \   00000072   19EB0000           ADDS     R0,R9,R0
   \   00000076   4078               LDRB     R0,[R0, #+1]
   \   00000078   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000007A   7919               ADDS     R1,R7,R5
   \   0000007C   4978               LDRB     R1,[R1, #+1]
   \   0000007E   8842               CMP      R0,R1
   \   00000080   DFD1               BNE.N    ??LCD_P14x16Str_6
   \   00000082   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000086   0E20               MOVS     R0,#+14
   \   00000088   00FB09F8           MUL      R8,R0,R9
   \                     ??LCD_P14x16Str_7:
   \   0000008C   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008E   772E               CMP      R6,#+119
   \   00000090   01D3               BCC.N    ??LCD_P14x16Str_8
   \   00000092   0026               MOVS     R6,#+0
   \   00000094   641C               ADDS     R4,R4,#+1
   \                     ??LCD_P14x16Str_8:
   \   00000096   2100               MOVS     R1,R4
   \   00000098   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009A   3000               MOVS     R0,R6
   \   0000009C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   ........           BL       LCD_Set_Pos
   \   000000A2   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000A6   B8F1010F           CMP      R8,#+1
   \   000000AA   33D0               BEQ.N    ??LCD_P14x16Str_9
   \   000000AC   2100               MOVS     R1,R4
   \   000000AE   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B0   3000               MOVS     R0,R6
   \   000000B2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   ........           BL       LCD_Set_Pos
   \   000000B8   5FF00009           MOVS     R9,#+0
   \   000000BC   0BE0               B.N      ??LCD_P14x16Str_10
   \                     ??LCD_P14x16Str_11:
   \   000000BE   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000C2   ........           ADR.W    R0,F14x16
   \   000000C6   18F80000           LDRB     R0,[R8, R0]
   \   000000CA   ........           BL       LCD_WrDat
   \   000000CE   18F10108           ADDS     R8,R8,#+1
   \   000000D2   19F10109           ADDS     R9,R9,#+1
   \                     ??LCD_P14x16Str_10:
   \   000000D6   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000DA   B9F10E0F           CMP      R9,#+14
   \   000000DE   EED3               BCC.N    ??LCD_P14x16Str_11
   \   000000E0   611C               ADDS     R1,R4,#+1
   \   000000E2   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E4   3000               MOVS     R0,R6
   \   000000E6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   ........           BL       LCD_Set_Pos
   \   000000EC   5FF00009           MOVS     R9,#+0
   \                     ??LCD_P14x16Str_12:
   \   000000F0   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000F4   B9F10E0F           CMP      R9,#+14
   \   000000F8   97D2               BCS.N    ??LCD_P14x16Str_3
   \   000000FA   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000FE   ........           ADR.W    R0,F14x16
   \   00000102   18F80000           LDRB     R0,[R8, R0]
   \   00000106   ........           BL       LCD_WrDat
   \   0000010A   18F10108           ADDS     R8,R8,#+1
   \   0000010E   19F10109           ADDS     R9,R9,#+1
   \   00000112   EDE7               B.N      ??LCD_P14x16Str_12
   \                     ??LCD_P14x16Str_9:
   \   00000114   7F1C               ADDS     R7,R7,#+1
   \   00000116   2100               MOVS     R1,R4
   \   00000118   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000011A   3000               MOVS     R0,R6
   \   0000011C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011E   ........           BL       LCD_Set_Pos
   \   00000122   5FF00009           MOVS     R9,#+0
   \   00000126   04E0               B.N      ??LCD_P14x16Str_13
   \                     ??LCD_P14x16Str_14:
   \   00000128   0020               MOVS     R0,#+0
   \   0000012A   ........           BL       LCD_WrDat
   \   0000012E   19F10109           ADDS     R9,R9,#+1
   \                     ??LCD_P14x16Str_13:
   \   00000132   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000136   B9F1100F           CMP      R9,#+16
   \   0000013A   F5D3               BCC.N    ??LCD_P14x16Str_14
   \   0000013C   611C               ADDS     R1,R4,#+1
   \   0000013E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000140   3000               MOVS     R0,R6
   \   00000142   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000144   ........           BL       LCD_Set_Pos
   \   00000148   5FF00009           MOVS     R9,#+0
   \   0000014C   68E7               B.N      ??LCD_P14x16Str_2
    752          	}
    753          }
   \                     ??LCD_P14x16Str_4:
   \   0000014E   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
    754          //输出汉字和字符混合字符串

   \                                 In section .text, align 2, keep-with-next
    755          void LCD_Print(byte x, byte y, byte ch[])
    756          {
   \                     LCD_Print:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
    757          	byte ch2[3];
    758          	byte ii=0;        
   \   00000008   0027               MOVS     R7,#+0
   \   0000000A   14E0               B.N      ??LCD_Print_0
    759          	while(ch[ii] != '\0')
    760          	{
    761          		if(ch[ii] > 127)
    762          		{
    763          			ch2[0] = ch[ii];
   \                     ??LCD_Print_1:
   \   0000000C   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000000E   B85D               LDRB     R0,[R7, R6]
   \   00000010   8DF80000           STRB     R0,[SP, #+0]
    764          	 		ch2[1] = ch[ii + 1];
   \   00000014   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   B819               ADDS     R0,R7,R6
   \   00000018   4078               LDRB     R0,[R0, #+1]
   \   0000001A   8DF80100           STRB     R0,[SP, #+1]
    765          			ch2[2] = '\0';			//汉字为两个字节
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   8DF80200           STRB     R0,[SP, #+2]
    766          			LCD_P14x16Str(x , y, ch2);	//显示汉字
   \   00000024   00AA               ADD      R2,SP,#+0
   \   00000026   2900               MOVS     R1,R5
   \   00000028   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   ........           BL       LCD_P14x16Str
    767          			x += 14;
   \   00000032   0E34               ADDS     R4,R4,#+14
    768          			ii += 2;
   \   00000034   BF1C               ADDS     R7,R7,#+2
    769          		}
   \                     ??LCD_Print_0:
   \   00000036   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   B85D               LDRB     R0,[R7, R6]
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   14D0               BEQ.N    ??LCD_Print_2
   \   0000003E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   B85D               LDRB     R0,[R7, R6]
   \   00000042   8028               CMP      R0,#+128
   \   00000044   E2D2               BCS.N    ??LCD_Print_1
    770          		else
    771          		{
    772          			ch2[0] = ch[ii];	
   \   00000046   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000048   B85D               LDRB     R0,[R7, R6]
   \   0000004A   8DF80000           STRB     R0,[SP, #+0]
    773          			ch2[1] = '\0';			//字母占一个字节
   \   0000004E   0020               MOVS     R0,#+0
   \   00000050   8DF80100           STRB     R0,[SP, #+1]
    774          			LCD_P8x16Str(x , y , ch2);	//显示字母
   \   00000054   00AA               ADD      R2,SP,#+0
   \   00000056   2900               MOVS     R1,R5
   \   00000058   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   ........           BL       LCD_P8x16Str
    775          			x += 8;
   \   00000062   0834               ADDS     R4,R4,#+8
    776          			ii+= 1;
   \   00000064   7F1C               ADDS     R7,R7,#+1
   \   00000066   E6E7               B.N      ??LCD_Print_0
    777          		}
    778          	}
    779          } 
   \                     ??LCD_Print_2:
   \   00000068   F1BD               POP      {R0,R4-R7,PC}    ;; return
    780          
    781          //==============================================================
    782          //函数名： void Draw_BMP(byte x,byte y)
    783          //功能描述：显示BMP图片128×64
    784          //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
    785          //返回：无
    786          //==============================================================

   \                                 In section .text, align 2, keep-with-next
    787          void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
    788          { 	
   \                     Draw_BMP:
   \   00000000   2DE9F047           PUSH     {R4-R10,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   1500               MOVS     R5,R2
   \   00000008   1E00               MOVS     R6,R3
   \   0000000A   089F               LDR      R7,[SP, #+32]
    789            word ii=0;
   \   0000000C   5FF00008           MOVS     R8,#+0
    790            byte x,y;
    791            
    792            if(y1%8==0) y=y1/8;      
   \   00000010   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0820               MOVS     R0,#+8
   \   00000014   96FBF0F2           SDIV     R2,R6,R0
   \   00000018   02FB1062           MLS      R2,R2,R0,R6
   \   0000001C   002A               CMP      R2,#+0
   \   0000001E   04D1               BNE.N    ??Draw_BMP_0
   \   00000020   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0820               MOVS     R0,#+8
   \   00000024   96FBF0FA           SDIV     R10,R6,R0
   \   00000028   05E0               B.N      ??Draw_BMP_1
    793            else y=y1/8+1;
   \                     ??Draw_BMP_0:
   \   0000002A   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0820               MOVS     R0,#+8
   \   0000002E   96FBF0F0           SDIV     R0,R6,R0
   \   00000032   10F1010A           ADDS     R10,R0,#+1
    794          	for(y=y0;y<=y1;y++)
   \                     ??Draw_BMP_1:
   \   00000036   8A46               MOV      R10,R1
   \   00000038   10E0               B.N      ??Draw_BMP_2
    795          	{
    796          		LCD_Set_Pos(x0,y);				
    797              for(x=x0;x<x1;x++)
    798          	    {      
    799          	    	LCD_WrDat(bmp[ii++]);	    	
   \                     ??Draw_BMP_3:
   \   0000003A   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003E   18F80700           LDRB     R0,[R8, R7]
   \   00000042   ........           BL       LCD_WrDat
   \   00000046   18F10108           ADDS     R8,R8,#+1
    800          	    }
   \   0000004A   19F10109           ADDS     R9,R9,#+1
   \                     ??Draw_BMP_4:
   \   0000004E   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000052   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   A945               CMP      R9,R5
   \   00000056   F0D3               BCC.N    ??Draw_BMP_3
   \   00000058   1AF1010A           ADDS     R10,R10,#+1
   \                     ??Draw_BMP_2:
   \   0000005C   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   5FFA8AFA           UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000062   5645               CMP      R6,R10
   \   00000064   07D3               BCC.N    ??Draw_BMP_5
   \   00000066   5146               MOV      R1,R10
   \   00000068   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006A   2000               MOVS     R0,R4
   \   0000006C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   ........           BL       LCD_Set_Pos
   \   00000072   A146               MOV      R9,R4
   \   00000074   EBE7               B.N      ??Draw_BMP_4
    801          	}
    802          }
   \                     ??Draw_BMP_5:
   \   00000076   BDE8F087           POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
    803          void Draw_LQLogo(void)
    804          { 	
   \                     Draw_LQLogo:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    805            word ii=0;
   \   00000002   0024               MOVS     R4,#+0
    806            byte x,y;       
    807            
    808          	for(y=0;y<8;y++)
   \   00000004   0026               MOVS     R6,#+0
   \   00000006   0AE0               B.N      ??Draw_LQLogo_0
    809          	{
    810          		LCD_Set_Pos(16,y);				
    811              for(x=16;x<112;x++)
    812          	    {      
    813          	    	LCD_WrDat(longqiu96x64[ii++]);	    	
   \                     ??Draw_LQLogo_1:
   \   00000008   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   ....               LDR.N    R0,??DataTable8_6
   \   0000000C   205C               LDRB     R0,[R4, R0]
   \   0000000E   ........           BL       LCD_WrDat
   \   00000012   641C               ADDS     R4,R4,#+1
    814          	    }
   \   00000014   6D1C               ADDS     R5,R5,#+1
   \                     ??Draw_LQLogo_2:
   \   00000016   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   702D               CMP      R5,#+112
   \   0000001A   F5D3               BCC.N    ??Draw_LQLogo_1
   \   0000001C   761C               ADDS     R6,R6,#+1
   \                     ??Draw_LQLogo_0:
   \   0000001E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   082E               CMP      R6,#+8
   \   00000022   06D2               BCS.N    ??Draw_LQLogo_3
   \   00000024   3100               MOVS     R1,R6
   \   00000026   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   1020               MOVS     R0,#+16
   \   0000002A   ........           BL       LCD_Set_Pos
   \   0000002E   1025               MOVS     R5,#+16
   \   00000030   F1E7               B.N      ??Draw_LQLogo_2
    815          	}
    816          }
   \                     ??Draw_LQLogo_3:
   \   00000032   70BD               POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    817          void Draw_LibLogo(void)
    818          { 	
   \                     Draw_LibLogo:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    819            word ii=0;
   \   00000002   0024               MOVS     R4,#+0
    820            byte x,y;       
    821            
    822          	for(y=0;y<8;y++)
   \   00000004   0026               MOVS     R6,#+0
   \   00000006   0BE0               B.N      ??Draw_LibLogo_0
    823          	{
    824          		LCD_Set_Pos(34,y);				
    825              for(x=34;x<94;x++)
    826          	    {      
    827          	    	LCD_WrDat(LIBLOGO60x58[ii++]);	    	
   \                     ??Draw_LibLogo_1:
   \   00000008   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   ........           ADR.W    R0,LIBLOGO60x58
   \   0000000E   205C               LDRB     R0,[R4, R0]
   \   00000010   ........           BL       LCD_WrDat
   \   00000014   641C               ADDS     R4,R4,#+1
    828          	    }
   \   00000016   6D1C               ADDS     R5,R5,#+1
   \                     ??Draw_LibLogo_2:
   \   00000018   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   5E2D               CMP      R5,#+94
   \   0000001C   F4D3               BCC.N    ??Draw_LibLogo_1
   \   0000001E   761C               ADDS     R6,R6,#+1
   \                     ??Draw_LibLogo_0:
   \   00000020   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   082E               CMP      R6,#+8
   \   00000024   06D2               BCS.N    ??Draw_LibLogo_3
   \   00000026   3100               MOVS     R1,R6
   \   00000028   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   2220               MOVS     R0,#+34
   \   0000002C   ........           BL       LCD_Set_Pos
   \   00000030   2225               MOVS     R5,#+34
   \   00000032   F1E7               B.N      ??Draw_LibLogo_2
    829          	}
    830          } 
   \                     ??Draw_LibLogo_3:
   \   00000034   70BD               POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   00F00F40           DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   38900440           DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   3C900440           DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   40900440           DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   44900440           DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   14F00F40           DC32     0x400ff014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   ........           DC32     longqiu96x64

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     Draw_BMP          32
     Draw_LQLogo       16
     Draw_LibLogo      16
     LCD_CLS           16
     LCD_DLY_ms         0
     LCD_Fill          16
     LCD_Init           8
     LCD_P14x16Str     32
     LCD_P6x8Str       32
     LCD_P8x16Str      32
     LCD_Print         24
     LCD_PutPixel      16
     LCD_Rectangle     32
     LCD_Set_Pos        8
     LCD_WrCmd          0
     LCD_WrDat          0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     F6x8            552
     F14x16_Idx       52
     F14x16          700
     F8X16          1520
     longqiu96x64    768
     LIBLOGO60x58    480
     LCD_WrDat       126
     LCD_WrCmd       122
     LCD_Set_Pos      44
     LCD_Fill         60
     LCD_CLS          56
     LCD_DLY_ms       26
     LCD_Init        290
     LCD_PutPixel     80
     LCD_Rectangle   152
     LCD_P6x8Str     122
     LCD_P8x16Str    168
     LCD_P14x16Str   338
     LCD_Print       106
     Draw_BMP        122
     Draw_LQLogo      52
     Draw_LibLogo     54
     ??DataTable8      4
     ??DataTable8_1    4
     ??DataTable8_2    4
     ??DataTable8_3    4
     ??DataTable8_4    4
     ??DataTable8_5    4
     ??DataTable8_6    4

 
   768 bytes in section .data
 5 250 bytes in section .text
 
 5 250 bytes of CODE memory
   768 bytes of DATA memory

Errors: none
Warnings: none
